/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FESimple__ClassInfo swig_types[0]
#define SWIGTYPE_p_FESimple__ControllerBase swig_types[1]
#define SWIGTYPE_p_FESimple__EditorProxy swig_types[2]
#define SWIGTYPE_p_FESimple__FixtureUserData swig_types[3]
#define SWIGTYPE_p_FESimple__GameBase swig_types[4]
#define SWIGTYPE_p_FESimple__GameInfo swig_types[5]
#define SWIGTYPE_p_FESimple__GameObjBase swig_types[6]
#define SWIGTYPE_p_FESimple__GameObjFactory swig_types[7]
#define SWIGTYPE_p_FESimple__GameScene swig_types[8]
#define SWIGTYPE_p_FESimple__IOSTouchController swig_types[9]
#define SWIGTYPE_p_FESimple__LevelBase swig_types[10]
#define SWIGTYPE_p_FESimple__LevelBound swig_types[11]
#define SWIGTYPE_p_FESimple__LevelData swig_types[12]
#define SWIGTYPE_p_FESimple__LevelTrigger swig_types[13]
#define SWIGTYPE_p_FESimple__ResourceManager swig_types[14]
#define SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__LevelData_t swig_types[15]
#define SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__animation_t swig_types[16]
#define SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__physic_desc_t swig_types[17]
#define SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__sprite_component_desc_t swig_types[18]
#define SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__sprite_desc_t swig_types[19]
#define SWIGTYPE_p_FESimple__SpriteBase swig_types[20]
#define SWIGTYPE_p_FESimple__SpriteComponent swig_types[21]
#define SWIGTYPE_p_FESimple__animation swig_types[22]
#define SWIGTYPE_p_FESimple__b2fixture_def swig_types[23]
#define SWIGTYPE_p_FESimple__physic_desc swig_types[24]
#define SWIGTYPE_p_FESimple__sprite_animation swig_types[25]
#define SWIGTYPE_p_FESimple__sprite_component_desc swig_types[26]
#define SWIGTYPE_p_FESimple__sprite_component_ref swig_types[27]
#define SWIGTYPE_p_FESimple__sprite_desc swig_types[28]
#define SWIGTYPE_p_FESimple__sprite_joint_desc swig_types[29]
#define SWIGTYPE_p_b2BodyDef swig_types[30]
#define SWIGTYPE_p_b2BodyType swig_types[31]
#define SWIGTYPE_p_b2Contact swig_types[32]
#define SWIGTYPE_p_b2JointType swig_types[33]
#define SWIGTYPE_p_b2Vec2 swig_types[34]
#define SWIGTYPE_p_b2World swig_types[35]
#define SWIGTYPE_p_cocos2d__CCAction swig_types[36]
#define SWIGTYPE_p_cocos2d__CCAffineTransform swig_types[37]
#define SWIGTYPE_p_cocos2d__CCAnimation swig_types[38]
#define SWIGTYPE_p_cocos2d__CCEvent swig_types[39]
#define SWIGTYPE_p_cocos2d__CCPoint swig_types[40]
#define SWIGTYPE_p_cocos2d__CCRect swig_types[41]
#define SWIGTYPE_p_cocos2d__CCSize swig_types[42]
#define SWIGTYPE_p_cocos2d__CCTouch swig_types[43]
#define SWIGTYPE_p_cocos2d__ccColor4F swig_types[44]
#define SWIGTYPE_p_difference_type swig_types[45]
#define SWIGTYPE_p_key_type swig_types[46]
#define SWIGTYPE_p_mapped_type swig_types[47]
#define SWIGTYPE_p_size_type swig_types[48]
#define SWIGTYPE_p_std__functionT_void_pfstd__mapT_std__string_std__string_t_const_RF_t swig_types[49]
#define SWIGTYPE_p_std__listT_std__shared_ptrT_FESimple__GameObjBase_t_t swig_types[50]
#define SWIGTYPE_p_std__mapT_std__string_FESimple__ClassInfo_const_p_t swig_types[51]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[52]
#define SWIGTYPE_p_std__shared_ptrT_FESimple__GameObjBase_t swig_types[53]
#define SWIGTYPE_p_std__shared_ptrT_FESimple__LevelData_t swig_types[54]
#define SWIGTYPE_p_std__shared_ptrT_FESimple__sprite_component_desc_t swig_types[55]
#define SWIGTYPE_p_std__string swig_types[56]
#define SWIGTYPE_p_std__vectorT_FESimple__ClassInfo_p_t swig_types[57]
#define SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t swig_types[58]
#define SWIGTYPE_p_std__vectorT_FESimple__LevelTrigger_t swig_types[59]
#define SWIGTYPE_p_std__vectorT_FESimple__SpriteComponent_p_t swig_types[60]
#define SWIGTYPE_p_std__vectorT_FESimple__b2fixture_def_t swig_types[61]
#define SWIGTYPE_p_std__vectorT_FESimple__sprite_component_ref_t swig_types[62]
#define SWIGTYPE_p_std__vectorT_FESimple__sprite_joint_desc_t swig_types[63]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[64]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[65]
#define SWIGTYPE_p_std__weak_ptrT_FESimple__GameObjBase_t swig_types[66]
#define SWIGTYPE_p_std__weak_ptrT_FESimple__SpriteBase_t swig_types[67]
static swig_type_info *swig_types[69];
static swig_module_info swig_module = {swig_types, 68, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "FEX"
#define SWIG_init      luaopen_FEX
#define SWIG_init_user luaopen_FEX_user

#define SWIG_LUACODE   luaopen_FEX_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "FE.h"
#include "FEUtility.h"
#include "ClassInfo.h"
#include "GameObjBase.h"
#include "SpriteBase.h"
#include "GameBase.h"
#include "LevelBase.h"
#include "SpriteComponent.h"
#include "ControllerBase.h"
#include "IOSTouchController.h"
#include "cocos2d.h"
#include "FEX/ResourceManager.h"


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>

SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN FESimple::ControllerBase *std_vector_Sl_FESimple_ControllerBase_Sm__Sg____getitem__(std::vector< FESimple::ControllerBase * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_FESimple_ControllerBase_Sm__Sg____setitem__(std::vector< FESimple::ControllerBase * > *self,unsigned int idx,FESimple::ControllerBase *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_map_string_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,std::string > *result = 0 ;
  
  SWIG_check_num_args("std::map< std::string,std::string >::map",0,0)
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_map_string_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  SWIG_check_num_args("std::map< std::string,std::string >::map",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::map< std::string,std::string >::map",1,"std::map< std::string,std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("new_map_string_string",1,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_map_string_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_map_string_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_map_string_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_map_string_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,std::string >::map()\n"
    "    std::map< std::string,std::string >::map(std::map< std::string,std::string > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_map_string_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::map< std::string,std::string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< std::string,std::string >::size",1,"std::map< std::string,std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("map_string_string_size",1,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_map_string_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::map< std::string,std::string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< std::string,std::string >::empty",1,"std::map< std::string,std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("map_string_string_empty",1,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_map_string_string_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  SWIG_check_num_args("std::map< std::string,std::string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< std::string,std::string >::clear",1,"std::map< std::string,std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("map_string_string_clear",1,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_map_string_string_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::map< std::string,std::string >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< std::string,std::string >::get",1,"std::map< std::string,std::string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< std::string,std::string >::get",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("map_string_string_get",1,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_map_string_string_set(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("std::map< std::string,std::string >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< std::string,std::string >::set",1,"std::map< std::string,std::string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< std::string,std::string >::set",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("std::map< std::string,std::string >::set",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("map_string_string_set",1,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_map_string_string_del(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("std::map< std::string,std::string >::del",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< std::string,std::string >::del",1,"std::map< std::string,std::string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< std::string,std::string >::del",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("map_string_string_del",1,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_map_string_string_has_key(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("std::map< std::string,std::string >::has_key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< std::string,std::string >::has_key",1,"std::map< std::string,std::string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< std::string,std::string >::has_key",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("map_string_string_has_key",1,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_map_string_string(void *obj) {
std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) obj;
delete arg1;
}
static swig_lua_method swig_std_map_Sl_std_string_Sc_std_string_Sg__methods[] = {
    {"size", _wrap_map_string_string_size}, 
    {"empty", _wrap_map_string_string_empty}, 
    {"clear", _wrap_map_string_string_clear}, 
    {"get", _wrap_map_string_string_get}, 
    {"set", _wrap_map_string_string_set}, 
    {"del", _wrap_map_string_string_del}, 
    {"has_key", _wrap_map_string_string_has_key}, 
    {0,0}
};
static swig_lua_attribute swig_std_map_Sl_std_string_Sc_std_string_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_map_Sl_std_string_Sc_std_string_Sg__bases[] = {0};
static const char *swig_std_map_Sl_std_string_Sc_std_string_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_map_Sl_std_string_Sc_std_string_Sg_ = { "map_string_string", &SWIGTYPE_p_std__mapT_std__string_std__string_t,_wrap_new_map_string_string, swig_delete_map_string_string, swig_std_map_Sl_std_string_Sc_std_string_Sg__methods, swig_std_map_Sl_std_string_Sc_std_string_Sg__attributes, swig_std_map_Sl_std_string_Sc_std_string_Sg__bases, swig_std_map_Sl_std_string_Sc_std_string_Sg__base_names };

static int _wrap_new_vector_controller__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::vector",0,0)
  result = (std::vector< FESimple::ControllerBase * > *)new std::vector< FESimple::ControllerBase * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_controller__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< FESimple::ControllerBase * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< FESimple::ControllerBase * > *)new std::vector< FESimple::ControllerBase * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_controller__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = 0 ;
  std::vector< FESimple::ControllerBase * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::vector",1,"std::vector< FESimple::ControllerBase * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("new_vector_controller",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  result = (std::vector< FESimple::ControllerBase * > *)new std::vector< FESimple::ControllerBase * >((std::vector< FESimple::ControllerBase * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_controller__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  FESimple::ControllerBase *arg2 = (FESimple::ControllerBase *) 0 ;
  std::vector< FESimple::ControllerBase * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::vector",2,"FESimple::ControllerBase *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__ControllerBase,0))){
    SWIG_fail_ptr("new_vector_controller",2,SWIGTYPE_p_FESimple__ControllerBase);
  }
  
  result = (std::vector< FESimple::ControllerBase * > *)new std::vector< FESimple::ControllerBase * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_controller(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_vector_controller__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vector_controller__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vector_controller__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FESimple__ControllerBase, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_vector_controller__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_vector_controller'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< FESimple::ControllerBase * >::vector()\n"
    "    std::vector< FESimple::ControllerBase * >::vector(unsigned int)\n"
    "    std::vector< FESimple::ControllerBase * >::vector(std::vector< FESimple::ControllerBase * > const &)\n"
    "    std::vector< FESimple::ControllerBase * >::vector(unsigned int,FESimple::ControllerBase *)\n");
  lua_error(L);return 0;
}


static int _wrap_vector_controller_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::size",1,"std::vector< FESimple::ControllerBase * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("vector_controller_size",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  result = (unsigned int)((std::vector< FESimple::ControllerBase * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_controller_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::max_size",1,"std::vector< FESimple::ControllerBase * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("vector_controller_max_size",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  result = (unsigned int)((std::vector< FESimple::ControllerBase * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_controller_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::empty",1,"std::vector< FESimple::ControllerBase * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("vector_controller_empty",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  result = (bool)((std::vector< FESimple::ControllerBase * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_controller_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::clear",1,"std::vector< FESimple::ControllerBase * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("vector_controller_clear",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_controller_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  FESimple::ControllerBase *arg2 = (FESimple::ControllerBase *) 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::push_back",1,"std::vector< FESimple::ControllerBase * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::push_back",2,"FESimple::ControllerBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("vector_controller_push_back",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__ControllerBase,0))){
    SWIG_fail_ptr("vector_controller_push_back",2,SWIGTYPE_p_FESimple__ControllerBase);
  }
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_controller_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::pop_back",1,"std::vector< FESimple::ControllerBase * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("vector_controller_pop_back",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_controller_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  FESimple::ControllerBase *result = 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::front",1,"std::vector< FESimple::ControllerBase * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("vector_controller_front",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  result = (FESimple::ControllerBase *)((std::vector< FESimple::ControllerBase * > const *)arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__ControllerBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_controller_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  FESimple::ControllerBase *result = 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::back",1,"std::vector< FESimple::ControllerBase * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("vector_controller_back",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  result = (FESimple::ControllerBase *)((std::vector< FESimple::ControllerBase * > const *)arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__ControllerBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_controller___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  unsigned int arg2 ;
  FESimple::ControllerBase *result = 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::__getitem__",1,"std::vector< FESimple::ControllerBase * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("vector_controller___getitem",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (FESimple::ControllerBase *)std_vector_Sl_FESimple_ControllerBase_Sm__Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__ControllerBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_controller___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  unsigned int arg2 ;
  FESimple::ControllerBase *arg3 = (FESimple::ControllerBase *) 0 ;
  
  SWIG_check_num_args("std::vector< FESimple::ControllerBase * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::__setitem__",1,"std::vector< FESimple::ControllerBase * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< FESimple::ControllerBase * >::__setitem__",3,"FESimple::ControllerBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("vector_controller___setitem",1,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FESimple__ControllerBase,0))){
    SWIG_fail_ptr("vector_controller___setitem",3,SWIGTYPE_p_FESimple__ControllerBase);
  }
  
  try {
    std_vector_Sl_FESimple_ControllerBase_Sm__Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vector_controller(void *obj) {
std::vector< FESimple::ControllerBase * > *arg1 = (std::vector< FESimple::ControllerBase * > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_FESimple_ControllerBase_Sm__Sg__methods[] = {
    {"size", _wrap_vector_controller_size}, 
    {"max_size", _wrap_vector_controller_max_size}, 
    {"empty", _wrap_vector_controller_empty}, 
    {"clear", _wrap_vector_controller_clear}, 
    {"push_back", _wrap_vector_controller_push_back}, 
    {"pop_back", _wrap_vector_controller_pop_back}, 
    {"front", _wrap_vector_controller_front}, 
    {"back", _wrap_vector_controller_back}, 
    {"__getitem", _wrap_vector_controller___getitem}, 
    {"__setitem", _wrap_vector_controller___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_FESimple_ControllerBase_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_FESimple_ControllerBase_Sm__Sg__bases[] = {0};
static const char *swig_std_vector_Sl_FESimple_ControllerBase_Sm__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_FESimple_ControllerBase_Sm__Sg_ = { "vector_controller", &SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,_wrap_new_vector_controller, swig_delete_vector_controller, swig_std_vector_Sl_FESimple_ControllerBase_Sm__Sg__methods, swig_std_vector_Sl_FESimple_ControllerBase_Sm__Sg__attributes, swig_std_vector_Sl_FESimple_ControllerBase_Sm__Sg__bases, swig_std_vector_Sl_FESimple_ControllerBase_Sm__Sg__base_names };

static int _wrap_CCPoint_x_set(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = (cocos2d::CCPoint *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("cocos2d::CCPoint::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCPoint::x",1,"cocos2d::CCPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCPoint::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("CCPoint_x_set",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCPoint_x_get(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = (cocos2d::CCPoint *) 0 ;
  float result;
  
  SWIG_check_num_args("cocos2d::CCPoint::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCPoint::x",1,"cocos2d::CCPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("CCPoint_x_get",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCPoint_y_set(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = (cocos2d::CCPoint *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("cocos2d::CCPoint::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCPoint::y",1,"cocos2d::CCPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCPoint::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("CCPoint_y_set",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCPoint_y_get(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = (cocos2d::CCPoint *) 0 ;
  float result;
  
  SWIG_check_num_args("cocos2d::CCPoint::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCPoint::y",1,"cocos2d::CCPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("CCPoint_y_get",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCPoint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCPoint::CCPoint",0,0)
  result = (cocos2d::CCPoint *)new cocos2d::CCPoint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCPoint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  cocos2d::CCPoint *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCPoint::CCPoint",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cocos2d::CCPoint::CCPoint",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCPoint::CCPoint",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (cocos2d::CCPoint *)new cocos2d::CCPoint(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCPoint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = 0 ;
  cocos2d::CCPoint *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCPoint::CCPoint",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cocos2d::CCPoint::CCPoint",1,"cocos2d::CCPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("new_CCPoint",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  result = (cocos2d::CCPoint *)new cocos2d::CCPoint((cocos2d::CCPoint const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCPoint(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CCPoint__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cocos2d__CCPoint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CCPoint__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CCPoint__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_CCPoint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cocos2d::CCPoint::CCPoint()\n"
    "    cocos2d::CCPoint::CCPoint(float,float)\n"
    "    cocos2d::CCPoint::CCPoint(cocos2d::CCPoint const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CCPoint_setPoint(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = (cocos2d::CCPoint *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("cocos2d::CCPoint::setPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCPoint::setPoint",1,"cocos2d::CCPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCPoint::setPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cocos2d::CCPoint::setPoint",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("CCPoint_setPoint",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setPoint(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCPoint_equals(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = (cocos2d::CCPoint *) 0 ;
  cocos2d::CCPoint *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cocos2d::CCPoint::equals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCPoint::equals",1,"cocos2d::CCPoint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cocos2d::CCPoint::equals",2,"cocos2d::CCPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("CCPoint_equals",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("CCPoint_equals",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  result = (bool)((cocos2d::CCPoint const *)arg1)->equals((cocos2d::CCPoint const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CCPoint(void *obj) {
cocos2d::CCPoint *arg1 = (cocos2d::CCPoint *) obj;
delete arg1;
}
static swig_lua_method swig_cocos2d_CCPoint_methods[] = {
    {"setPoint", _wrap_CCPoint_setPoint}, 
    {"equals", _wrap_CCPoint_equals}, 
    {0,0}
};
static swig_lua_attribute swig_cocos2d_CCPoint_attributes[] = {
    { "x", _wrap_CCPoint_x_get, _wrap_CCPoint_x_set},
    { "y", _wrap_CCPoint_y_get, _wrap_CCPoint_y_set},
    {0,0,0}
};
static swig_lua_class *swig_cocos2d_CCPoint_bases[] = {0};
static const char *swig_cocos2d_CCPoint_base_names[] = {0};
static swig_lua_class _wrap_class_cocos2d_CCPoint = { "CCPoint", &SWIGTYPE_p_cocos2d__CCPoint,_wrap_new_CCPoint, swig_delete_CCPoint, swig_cocos2d_CCPoint_methods, swig_cocos2d_CCPoint_attributes, swig_cocos2d_CCPoint_bases, swig_cocos2d_CCPoint_base_names };

static int _wrap_CCSize_width_set(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCSize *arg1 = (cocos2d::CCSize *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("cocos2d::CCSize::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCSize::width",1,"cocos2d::CCSize *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCSize::width",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCSize,0))){
    SWIG_fail_ptr("CCSize_width_set",1,SWIGTYPE_p_cocos2d__CCSize);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCSize_width_get(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCSize *arg1 = (cocos2d::CCSize *) 0 ;
  float result;
  
  SWIG_check_num_args("cocos2d::CCSize::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCSize::width",1,"cocos2d::CCSize *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCSize,0))){
    SWIG_fail_ptr("CCSize_width_get",1,SWIGTYPE_p_cocos2d__CCSize);
  }
  
  result = (float) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCSize_height_set(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCSize *arg1 = (cocos2d::CCSize *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("cocos2d::CCSize::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCSize::height",1,"cocos2d::CCSize *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCSize::height",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCSize,0))){
    SWIG_fail_ptr("CCSize_height_set",1,SWIGTYPE_p_cocos2d__CCSize);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCSize_height_get(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCSize *arg1 = (cocos2d::CCSize *) 0 ;
  float result;
  
  SWIG_check_num_args("cocos2d::CCSize::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCSize::height",1,"cocos2d::CCSize *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCSize,0))){
    SWIG_fail_ptr("CCSize_height_get",1,SWIGTYPE_p_cocos2d__CCSize);
  }
  
  result = (float) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCSize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCSize *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCSize::CCSize",0,0)
  result = (cocos2d::CCSize *)new cocos2d::CCSize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCSize,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCSize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  cocos2d::CCSize *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCSize::CCSize",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cocos2d::CCSize::CCSize",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCSize::CCSize",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (cocos2d::CCSize *)new cocos2d::CCSize(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCSize,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCSize__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCSize *arg1 = 0 ;
  cocos2d::CCSize *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCSize::CCSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cocos2d::CCSize::CCSize",1,"cocos2d::CCSize const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCSize,0))){
    SWIG_fail_ptr("new_CCSize",1,SWIGTYPE_p_cocos2d__CCSize);
  }
  
  result = (cocos2d::CCSize *)new cocos2d::CCSize((cocos2d::CCSize const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCSize,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCSize(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CCSize__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cocos2d__CCSize, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CCSize__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CCSize__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_CCSize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cocos2d::CCSize::CCSize()\n"
    "    cocos2d::CCSize::CCSize(float,float)\n"
    "    cocos2d::CCSize::CCSize(cocos2d::CCSize const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CCSize_setSize(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCSize *arg1 = (cocos2d::CCSize *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("cocos2d::CCSize::setSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCSize::setSize",1,"cocos2d::CCSize *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCSize::setSize",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cocos2d::CCSize::setSize",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCSize,0))){
    SWIG_fail_ptr("CCSize_setSize",1,SWIGTYPE_p_cocos2d__CCSize);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCSize_equals(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCSize *arg1 = (cocos2d::CCSize *) 0 ;
  cocos2d::CCSize *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cocos2d::CCSize::equals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCSize::equals",1,"cocos2d::CCSize const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cocos2d::CCSize::equals",2,"cocos2d::CCSize const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCSize,0))){
    SWIG_fail_ptr("CCSize_equals",1,SWIGTYPE_p_cocos2d__CCSize);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCSize,0))){
    SWIG_fail_ptr("CCSize_equals",2,SWIGTYPE_p_cocos2d__CCSize);
  }
  
  result = (bool)((cocos2d::CCSize const *)arg1)->equals((cocos2d::CCSize const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CCSize(void *obj) {
cocos2d::CCSize *arg1 = (cocos2d::CCSize *) obj;
delete arg1;
}
static swig_lua_method swig_cocos2d_CCSize_methods[] = {
    {"setSize", _wrap_CCSize_setSize}, 
    {"equals", _wrap_CCSize_equals}, 
    {0,0}
};
static swig_lua_attribute swig_cocos2d_CCSize_attributes[] = {
    { "width", _wrap_CCSize_width_get, _wrap_CCSize_width_set},
    { "height", _wrap_CCSize_height_get, _wrap_CCSize_height_set},
    {0,0,0}
};
static swig_lua_class *swig_cocos2d_CCSize_bases[] = {0};
static const char *swig_cocos2d_CCSize_base_names[] = {0};
static swig_lua_class _wrap_class_cocos2d_CCSize = { "CCSize", &SWIGTYPE_p_cocos2d__CCSize,_wrap_new_CCSize, swig_delete_CCSize, swig_cocos2d_CCSize_methods, swig_cocos2d_CCSize_attributes, swig_cocos2d_CCSize_bases, swig_cocos2d_CCSize_base_names };

static int _wrap_CCRect_origin_set(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  cocos2d::CCPoint *arg2 = (cocos2d::CCPoint *) 0 ;
  
  SWIG_check_num_args("cocos2d::CCRect::origin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::origin",1,"cocos2d::CCRect *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cocos2d::CCRect::origin",2,"cocos2d::CCPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_origin_set",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("CCRect_origin_set",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  if (arg1) (arg1)->origin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_origin_get(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  cocos2d::CCPoint *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCRect::origin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::origin",1,"cocos2d::CCRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_origin_get",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (cocos2d::CCPoint *)& ((arg1)->origin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCPoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_size_set(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  cocos2d::CCSize *arg2 = (cocos2d::CCSize *) 0 ;
  
  SWIG_check_num_args("cocos2d::CCRect::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::size",1,"cocos2d::CCRect *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cocos2d::CCRect::size",2,"cocos2d::CCSize *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_size_set",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCSize,0))){
    SWIG_fail_ptr("CCRect_size_set",2,SWIGTYPE_p_cocos2d__CCSize);
  }
  
  if (arg1) (arg1)->size = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_size_get(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  cocos2d::CCSize *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCRect::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::size",1,"cocos2d::CCRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_size_get",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (cocos2d::CCSize *)& ((arg1)->size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCSize,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCRect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCRect::CCRect",0,0)
  result = (cocos2d::CCRect *)new cocos2d::CCRect();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCRect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCRect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  cocos2d::CCRect *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCRect::CCRect",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cocos2d::CCRect::CCRect",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCRect::CCRect",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cocos2d::CCRect::CCRect",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cocos2d::CCRect::CCRect",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (cocos2d::CCRect *)new cocos2d::CCRect(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCRect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCRect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = 0 ;
  cocos2d::CCRect *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCRect::CCRect",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cocos2d::CCRect::CCRect",1,"cocos2d::CCRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("new_CCRect",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (cocos2d::CCRect *)new cocos2d::CCRect((cocos2d::CCRect const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCRect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCRect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CCRect__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cocos2d__CCRect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CCRect__SWIG_2(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CCRect__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_CCRect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cocos2d::CCRect::CCRect()\n"
    "    cocos2d::CCRect::CCRect(float,float,float,float)\n"
    "    cocos2d::CCRect::CCRect(cocos2d::CCRect const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CCRect_setRect(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("cocos2d::CCRect::setRect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::setRect",1,"cocos2d::CCRect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCRect::setRect",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cocos2d::CCRect::setRect",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cocos2d::CCRect::setRect",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cocos2d::CCRect::setRect",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_setRect",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setRect(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_getMinX(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  float result;
  
  SWIG_check_num_args("cocos2d::CCRect::getMinX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::getMinX",1,"cocos2d::CCRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_getMinX",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (float)((cocos2d::CCRect const *)arg1)->getMinX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_getMidX(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  float result;
  
  SWIG_check_num_args("cocos2d::CCRect::getMidX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::getMidX",1,"cocos2d::CCRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_getMidX",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (float)((cocos2d::CCRect const *)arg1)->getMidX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_getMaxX(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  float result;
  
  SWIG_check_num_args("cocos2d::CCRect::getMaxX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::getMaxX",1,"cocos2d::CCRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_getMaxX",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (float)((cocos2d::CCRect const *)arg1)->getMaxX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_getMinY(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  float result;
  
  SWIG_check_num_args("cocos2d::CCRect::getMinY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::getMinY",1,"cocos2d::CCRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_getMinY",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (float)((cocos2d::CCRect const *)arg1)->getMinY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_getMidY(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  float result;
  
  SWIG_check_num_args("cocos2d::CCRect::getMidY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::getMidY",1,"cocos2d::CCRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_getMidY",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (float)((cocos2d::CCRect const *)arg1)->getMidY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_getMaxY(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  float result;
  
  SWIG_check_num_args("cocos2d::CCRect::getMaxY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::getMaxY",1,"cocos2d::CCRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_getMaxY",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (float)((cocos2d::CCRect const *)arg1)->getMaxY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_equals(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  cocos2d::CCRect *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cocos2d::CCRect::equals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::equals",1,"cocos2d::CCRect const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cocos2d::CCRect::equals",2,"cocos2d::CCRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_equals",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_equals",2,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (bool)((cocos2d::CCRect const *)arg1)->equals((cocos2d::CCRect const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_containsPoint(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  cocos2d::CCPoint *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cocos2d::CCRect::containsPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::containsPoint",1,"cocos2d::CCRect const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cocos2d::CCRect::containsPoint",2,"cocos2d::CCPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_containsPoint",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("CCRect_containsPoint",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  result = (bool)((cocos2d::CCRect const *)arg1)->containsPoint((cocos2d::CCPoint const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCRect_intersectsRect(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCRect *arg1 = (cocos2d::CCRect *) 0 ;
  cocos2d::CCRect *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cocos2d::CCRect::intersectsRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCRect::intersectsRect",1,"cocos2d::CCRect const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cocos2d::CCRect::intersectsRect",2,"cocos2d::CCRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_intersectsRect",1,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("CCRect_intersectsRect",2,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  result = (bool)((cocos2d::CCRect const *)arg1)->intersectsRect((cocos2d::CCRect const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CCRect(void *obj) {
cocos2d::CCRect *arg1 = (cocos2d::CCRect *) obj;
delete arg1;
}
static swig_lua_method swig_cocos2d_CCRect_methods[] = {
    {"setRect", _wrap_CCRect_setRect}, 
    {"getMinX", _wrap_CCRect_getMinX}, 
    {"getMidX", _wrap_CCRect_getMidX}, 
    {"getMaxX", _wrap_CCRect_getMaxX}, 
    {"getMinY", _wrap_CCRect_getMinY}, 
    {"getMidY", _wrap_CCRect_getMidY}, 
    {"getMaxY", _wrap_CCRect_getMaxY}, 
    {"equals", _wrap_CCRect_equals}, 
    {"containsPoint", _wrap_CCRect_containsPoint}, 
    {"intersectsRect", _wrap_CCRect_intersectsRect}, 
    {0,0}
};
static swig_lua_attribute swig_cocos2d_CCRect_attributes[] = {
    { "origin", _wrap_CCRect_origin_get, _wrap_CCRect_origin_set},
    { "size", _wrap_CCRect_size_get, _wrap_CCRect_size_set},
    {0,0,0}
};
static swig_lua_class *swig_cocos2d_CCRect_bases[] = {0};
static const char *swig_cocos2d_CCRect_base_names[] = {0};
static swig_lua_class _wrap_class_cocos2d_CCRect = { "CCRect", &SWIGTYPE_p_cocos2d__CCRect,_wrap_new_CCRect, swig_delete_CCRect, swig_cocos2d_CCRect_methods, swig_cocos2d_CCRect_attributes, swig_cocos2d_CCRect_bases, swig_cocos2d_CCRect_base_names };

static int _wrap_new_CCTouch(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCTouch *result = 0 ;
  
  SWIG_check_num_args("cocos2d::CCTouch::CCTouch",0,0)
  result = (cocos2d::CCTouch *)new cocos2d::CCTouch();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCTouch,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCTouch_getLocation(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCTouch *arg1 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("cocos2d::CCTouch::getLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCTouch::getLocation",1,"cocos2d::CCTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("CCTouch_getLocation",1,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  result = ((cocos2d::CCTouch const *)arg1)->getLocation();
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCTouch_getPreviousLocation(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCTouch *arg1 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("cocos2d::CCTouch::getPreviousLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCTouch::getPreviousLocation",1,"cocos2d::CCTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("CCTouch_getPreviousLocation",1,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  result = ((cocos2d::CCTouch const *)arg1)->getPreviousLocation();
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCTouch_getStartLocation(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCTouch *arg1 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("cocos2d::CCTouch::getStartLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCTouch::getStartLocation",1,"cocos2d::CCTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("CCTouch_getStartLocation",1,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  result = ((cocos2d::CCTouch const *)arg1)->getStartLocation();
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCTouch_getDelta(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCTouch *arg1 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("cocos2d::CCTouch::getDelta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCTouch::getDelta",1,"cocos2d::CCTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("CCTouch_getDelta",1,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  result = ((cocos2d::CCTouch const *)arg1)->getDelta();
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCTouch_getLocationInView(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCTouch *arg1 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("cocos2d::CCTouch::getLocationInView",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCTouch::getLocationInView",1,"cocos2d::CCTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("CCTouch_getLocationInView",1,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  result = ((cocos2d::CCTouch const *)arg1)->getLocationInView();
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCTouch_getPreviousLocationInView(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCTouch *arg1 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("cocos2d::CCTouch::getPreviousLocationInView",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCTouch::getPreviousLocationInView",1,"cocos2d::CCTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("CCTouch_getPreviousLocationInView",1,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  result = ((cocos2d::CCTouch const *)arg1)->getPreviousLocationInView();
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCTouch_getStartLocationInView(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCTouch *arg1 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("cocos2d::CCTouch::getStartLocationInView",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCTouch::getStartLocationInView",1,"cocos2d::CCTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("CCTouch_getStartLocationInView",1,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  result = ((cocos2d::CCTouch const *)arg1)->getStartLocationInView();
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCTouch_setTouchInfo(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCTouch *arg1 = (cocos2d::CCTouch *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("cocos2d::CCTouch::setTouchInfo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCTouch::setTouchInfo",1,"cocos2d::CCTouch *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cocos2d::CCTouch::setTouchInfo",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cocos2d::CCTouch::setTouchInfo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cocos2d::CCTouch::setTouchInfo",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("CCTouch_setTouchInfo",1,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setTouchInfo(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCTouch_getID(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCTouch *arg1 = (cocos2d::CCTouch *) 0 ;
  int result;
  
  SWIG_check_num_args("cocos2d::CCTouch::getID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cocos2d::CCTouch::getID",1,"cocos2d::CCTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("CCTouch_getID",1,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  result = (int)((cocos2d::CCTouch const *)arg1)->getID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CCTouch(void *obj) {
cocos2d::CCTouch *arg1 = (cocos2d::CCTouch *) obj;
delete arg1;
}
static swig_lua_method swig_cocos2d_CCTouch_methods[] = {
    {"getLocation", _wrap_CCTouch_getLocation}, 
    {"getPreviousLocation", _wrap_CCTouch_getPreviousLocation}, 
    {"getStartLocation", _wrap_CCTouch_getStartLocation}, 
    {"getDelta", _wrap_CCTouch_getDelta}, 
    {"getLocationInView", _wrap_CCTouch_getLocationInView}, 
    {"getPreviousLocationInView", _wrap_CCTouch_getPreviousLocationInView}, 
    {"getStartLocationInView", _wrap_CCTouch_getStartLocationInView}, 
    {"setTouchInfo", _wrap_CCTouch_setTouchInfo}, 
    {"getID", _wrap_CCTouch_getID}, 
    {0,0}
};
static swig_lua_attribute swig_cocos2d_CCTouch_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_cocos2d_CCTouch_bases[] = {0};
static const char *swig_cocos2d_CCTouch_base_names[] = {0};
static swig_lua_class _wrap_class_cocos2d_CCTouch = { "CCTouch", &SWIGTYPE_p_cocos2d__CCTouch,_wrap_new_CCTouch, swig_delete_CCTouch, swig_cocos2d_CCTouch_methods, swig_cocos2d_CCTouch_attributes, swig_cocos2d_CCTouch_bases, swig_cocos2d_CCTouch_base_names };

static int _wrap_ClassInfo_is_kind_of(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) 0 ;
  FESimple::ClassInfo *arg2 = (FESimple::ClassInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("FESimple::ClassInfo::is_kind_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ClassInfo::is_kind_of",1,"FESimple::ClassInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::ClassInfo::is_kind_of",2,"FESimple::ClassInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("ClassInfo_is_kind_of",1,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("ClassInfo_is_kind_of",2,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  result = (bool)(arg1)->is_kind_of((FESimple::ClassInfo const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassInfo_name_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) 0 ;
  FESimple::Name *arg2 = 0 ;
  FESimple::Name temp2 ;
  
  SWIG_check_num_args("FESimple::ClassInfo::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ClassInfo::name",1,"FESimple::ClassInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::ClassInfo::name",2,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("ClassInfo_name_set",1,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassInfo_name_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) 0 ;
  FESimple::Name *result = 0 ;
  
  SWIG_check_num_args("FESimple::ClassInfo::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ClassInfo::name",1,"FESimple::ClassInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("ClassInfo_name_get",1,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  result = (FESimple::Name *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassInfo_parent_classes_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) 0 ;
  std::vector< FESimple::ClassInfo * > *arg2 = (std::vector< FESimple::ClassInfo * > *) 0 ;
  
  SWIG_check_num_args("FESimple::ClassInfo::parent_classes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ClassInfo::parent_classes",1,"FESimple::ClassInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::ClassInfo::parent_classes",2,"std::vector< FESimple::ClassInfo * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("ClassInfo_parent_classes_set",1,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_FESimple__ClassInfo_p_t,0))){
    SWIG_fail_ptr("ClassInfo_parent_classes_set",2,SWIGTYPE_p_std__vectorT_FESimple__ClassInfo_p_t);
  }
  
  if (arg1) (arg1)->parent_classes = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassInfo_parent_classes_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) 0 ;
  std::vector< FESimple::ClassInfo * > *result = 0 ;
  
  SWIG_check_num_args("FESimple::ClassInfo::parent_classes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ClassInfo::parent_classes",1,"FESimple::ClassInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("ClassInfo_parent_classes_get",1,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  result = (std::vector< FESimple::ClassInfo * > *)& ((arg1)->parent_classes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__ClassInfo_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassInfo_constructor_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) 0 ;
  std::function< void *(FESimple::SpawnParams const &) > *arg2 = (std::function< void *(FESimple::SpawnParams const &) > *) 0 ;
  
  SWIG_check_num_args("FESimple::ClassInfo::constructor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ClassInfo::constructor",1,"FESimple::ClassInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::ClassInfo::constructor",2,"std::function< void *(FESimple::SpawnParams const &) > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("ClassInfo_constructor_set",1,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__functionT_void_pfstd__mapT_std__string_std__string_t_const_RF_t,0))){
    SWIG_fail_ptr("ClassInfo_constructor_set",2,SWIGTYPE_p_std__functionT_void_pfstd__mapT_std__string_std__string_t_const_RF_t);
  }
  
  if (arg1) (arg1)->constructor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassInfo_constructor_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) 0 ;
  std::function< void *(FESimple::SpawnParams const &) > *result = 0 ;
  
  SWIG_check_num_args("FESimple::ClassInfo::constructor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ClassInfo::constructor",1,"FESimple::ClassInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("ClassInfo_constructor_get",1,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  result = (std::function< void *(FESimple::SpawnParams const &) > *)& ((arg1)->constructor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__functionT_void_pfstd__mapT_std__string_std__string_t_const_RF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ClassInfo(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *result = 0 ;
  
  SWIG_check_num_args("FESimple::ClassInfo::ClassInfo",0,0)
  result = (FESimple::ClassInfo *)new FESimple::ClassInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__ClassInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClassInfo(void *obj) {
FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_ClassInfo_methods[] = {
    {"is_kind_of", _wrap_ClassInfo_is_kind_of}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_ClassInfo_attributes[] = {
    { "name", _wrap_ClassInfo_name_get, _wrap_ClassInfo_name_set},
    { "parent_classes", _wrap_ClassInfo_parent_classes_get, _wrap_ClassInfo_parent_classes_set},
    { "constructor", _wrap_ClassInfo_constructor_get, _wrap_ClassInfo_constructor_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_ClassInfo_bases[] = {0};
static const char *swig_FESimple_ClassInfo_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_ClassInfo = { "ClassInfo", &SWIGTYPE_p_FESimple__ClassInfo,_wrap_new_ClassInfo, swig_delete_ClassInfo, swig_FESimple_ClassInfo_methods, swig_FESimple_ClassInfo_attributes, swig_FESimple_ClassInfo_bases, swig_FESimple_ClassInfo_base_names };

static int _wrap_new_EditorProxy(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::EditorProxy *result = 0 ;
  
  SWIG_check_num_args("FESimple::EditorProxy::EditorProxy",0,0)
  result = (FESimple::EditorProxy *)new FESimple::EditorProxy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__EditorProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditorProxy_hit_test(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::EditorProxy *arg1 = (FESimple::EditorProxy *) 0 ;
  cocos2d::CCPoint *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("FESimple::EditorProxy::hit_test",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::EditorProxy::hit_test",1,"FESimple::EditorProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::EditorProxy::hit_test",2,"cocos2d::CCPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__EditorProxy,0))){
    SWIG_fail_ptr("EditorProxy_hit_test",1,SWIGTYPE_p_FESimple__EditorProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("EditorProxy_hit_test",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  result = (bool)(arg1)->hit_test((cocos2d::CCPoint const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditorProxy_set_selected(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::EditorProxy *arg1 = (FESimple::EditorProxy *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("FESimple::EditorProxy::set_selected",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::EditorProxy::set_selected",1,"FESimple::EditorProxy *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("FESimple::EditorProxy::set_selected",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__EditorProxy,0))){
    SWIG_fail_ptr("EditorProxy_set_selected",1,SWIGTYPE_p_FESimple__EditorProxy);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->set_selected(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditorProxy_set_object(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::EditorProxy *arg1 = (FESimple::EditorProxy *) 0 ;
  SwigValueWrapper< std::weak_ptr< FESimple::GameObjBase > > arg2 ;
  std::weak_ptr< FESimple::GameObjBase > *argp2 ;
  
  SWIG_check_num_args("FESimple::EditorProxy::set_object",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::EditorProxy::set_object",1,"FESimple::EditorProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::EditorProxy::set_object",2,"std::weak_ptr< FESimple::GameObjBase >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__EditorProxy,0))){
    SWIG_fail_ptr("EditorProxy_set_object",1,SWIGTYPE_p_FESimple__EditorProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__weak_ptrT_FESimple__GameObjBase_t,0))){
    SWIG_fail_ptr("EditorProxy_set_object",2,SWIGTYPE_p_std__weak_ptrT_FESimple__GameObjBase_t);
  }
  arg2 = *argp2;
  
  (arg1)->set_object(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EditorProxy(void *obj) {
FESimple::EditorProxy *arg1 = (FESimple::EditorProxy *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_EditorProxy_methods[] = {
    {"hit_test", _wrap_EditorProxy_hit_test}, 
    {"set_selected", _wrap_EditorProxy_set_selected}, 
    {"set_object", _wrap_EditorProxy_set_object}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_EditorProxy_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_FESimple_EditorProxy_bases[] = {0};
static const char *swig_FESimple_EditorProxy_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_EditorProxy = { "EditorProxy", &SWIGTYPE_p_FESimple__EditorProxy,_wrap_new_EditorProxy, swig_delete_EditorProxy, swig_FESimple_EditorProxy_methods, swig_FESimple_EditorProxy_attributes, swig_FESimple_EditorProxy_bases, swig_FESimple_EditorProxy_base_names };

static int _wrap_GameObjBase_classinfo_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) 0 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::classinfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::classinfo",1,"FESimple::ClassInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("GameObjBase_classinfo_set",1,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  FESimple::GameObjBase::classinfo = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_classinfo_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::classinfo",0,0)
  result = (FESimple::ClassInfo *)&FESimple::GameObjBase::classinfo;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__ClassInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_get_class_info(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  FESimple::ClassInfo *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::get_class_info",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::get_class_info",1,"FESimple::GameObjBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_get_class_info",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  result = (FESimple::ClassInfo *)(arg1)->get_class_info();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__ClassInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GameObjBase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpawnParams *arg1 = 0 ;
  FESimple::GameObjBase *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::GameObjBase",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FESimple::GameObjBase::GameObjBase",1,"FESimple::SpawnParams const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("new_GameObjBase",1,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (FESimple::GameObjBase *)new FESimple::GameObjBase((FESimple::SpawnParams const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__GameObjBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GameObjBase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::GameObjBase",0,0)
  result = (FESimple::GameObjBase *)new FESimple::GameObjBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__GameObjBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GameObjBase(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_GameObjBase__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GameObjBase__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_GameObjBase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FESimple::GameObjBase::GameObjBase(FESimple::SpawnParams const &)\n"
    "    FESimple::GameObjBase::GameObjBase()\n");
  lua_error(L);return 0;
}


static int _wrap_GameObjBase_added_to_game(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  FESimple::GameBase *arg2 = (FESimple::GameBase *) 0 ;
  FESimple::Name *arg3 = 0 ;
  FESimple::Name temp3 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::added_to_game",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::added_to_game",1,"FESimple::GameObjBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::GameObjBase::added_to_game",2,"FESimple::GameBase *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("FESimple::GameObjBase::added_to_game",3,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_added_to_game",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameObjBase_added_to_game",2,SWIGTYPE_p_FESimple__GameBase);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->added_to_game(arg2,(FESimple::Name const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_removed_from_game(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  FESimple::GameBase *arg2 = (FESimple::GameBase *) 0 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::removed_from_game",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::removed_from_game",1,"FESimple::GameObjBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::GameObjBase::removed_from_game",2,"FESimple::GameBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_removed_from_game",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameObjBase_removed_from_game",2,SWIGTYPE_p_FESimple__GameBase);
  }
  
  (arg1)->removed_from_game(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_update(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::update",1,"FESimple::GameObjBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::GameObjBase::update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_update",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_get_name(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  FESimple::Name *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::get_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::get_name",1,"FESimple::GameObjBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_get_name",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  result = (FESimple::Name *) &(arg1)->get_name();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_set_name(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  FESimple::Name *arg2 = 0 ;
  FESimple::Name temp2 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::set_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::set_name",1,"FESimple::GameObjBase *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::GameObjBase::set_name",2,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_set_name",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->set_name((FESimple::Name const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_is_dead(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("FESimple::GameObjBase::is_dead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::is_dead",1,"FESimple::GameObjBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_is_dead",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  result = (bool)(arg1)->is_dead();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_set_dead(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::set_dead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::set_dead",1,"FESimple::GameObjBase *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("FESimple::GameObjBase::set_dead",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_set_dead",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->set_dead(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_get_editor_proxy(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  FESimple::EditorProxy *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::get_editor_proxy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::get_editor_proxy",1,"FESimple::GameObjBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_get_editor_proxy",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  result = (FESimple::EditorProxy *)(arg1)->get_editor_proxy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__EditorProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_set_editor_proxy(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  FESimple::EditorProxy *arg2 = (FESimple::EditorProxy *) 0 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::set_editor_proxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::set_editor_proxy",1,"FESimple::GameObjBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::GameObjBase::set_editor_proxy",2,"FESimple::EditorProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_set_editor_proxy",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__EditorProxy,0))){
    SWIG_fail_ptr("GameObjBase_set_editor_proxy",2,SWIGTYPE_p_FESimple__EditorProxy);
  }
  
  (arg1)->set_editor_proxy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_get_trigger_id(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  int result;
  
  SWIG_check_num_args("FESimple::GameObjBase::get_trigger_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::get_trigger_id",1,"FESimple::GameObjBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_get_trigger_id",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  result = (int)(arg1)->get_trigger_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_set_trigger_id(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::set_trigger_id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::set_trigger_id",1,"FESimple::GameObjBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::GameObjBase::set_trigger_id",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_set_trigger_id",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->set_trigger_id(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjBase_set_class_info(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  FESimple::ClassInfo *arg2 = (FESimple::ClassInfo *) 0 ;
  
  SWIG_check_num_args("FESimple::GameObjBase::set_class_info",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjBase::set_class_info",1,"FESimple::GameObjBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::GameObjBase::set_class_info",2,"FESimple::ClassInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("GameObjBase_set_class_info",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("GameObjBase_set_class_info",2,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  (arg1)->set_class_info((FESimple::ClassInfo const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GameObjBase(void *obj) {
FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_GameObjBase_methods[] = {
    {"get_class_info", _wrap_GameObjBase_get_class_info}, 
    {"added_to_game", _wrap_GameObjBase_added_to_game}, 
    {"removed_from_game", _wrap_GameObjBase_removed_from_game}, 
    {"update", _wrap_GameObjBase_update}, 
    {"get_name", _wrap_GameObjBase_get_name}, 
    {"set_name", _wrap_GameObjBase_set_name}, 
    {"is_dead", _wrap_GameObjBase_is_dead}, 
    {"set_dead", _wrap_GameObjBase_set_dead}, 
    {"get_editor_proxy", _wrap_GameObjBase_get_editor_proxy}, 
    {"set_editor_proxy", _wrap_GameObjBase_set_editor_proxy}, 
    {"get_trigger_id", _wrap_GameObjBase_get_trigger_id}, 
    {"set_trigger_id", _wrap_GameObjBase_set_trigger_id}, 
    {"set_class_info", _wrap_GameObjBase_set_class_info}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_GameObjBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_FESimple_GameObjBase_bases[] = {0};
static const char *swig_FESimple_GameObjBase_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_GameObjBase = { "GameObjBase", &SWIGTYPE_p_FESimple__GameObjBase,_wrap_new_GameObjBase, swig_delete_GameObjBase, swig_FESimple_GameObjBase_methods, swig_FESimple_GameObjBase_attributes, swig_FESimple_GameObjBase_bases, swig_FESimple_GameObjBase_base_names };

static int _wrap_SpriteBase_classinfo_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::classinfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::classinfo",1,"FESimple::ClassInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("SpriteBase_classinfo_set",1,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  FESimple::SpriteBase::classinfo = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_classinfo_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *result = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::classinfo",0,0)
  result = (FESimple::ClassInfo *)&FESimple::SpriteBase::classinfo;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__ClassInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_get_class_info(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  FESimple::ClassInfo *result = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::get_class_info",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::get_class_info",1,"FESimple::SpriteBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_get_class_info",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  result = (FESimple::ClassInfo *)(arg1)->get_class_info();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__ClassInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SpriteBase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *result = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::SpriteBase",0,0)
  result = (FESimple::SpriteBase *)new FESimple::SpriteBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SpriteBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SpriteBase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpawnParams *arg1 = 0 ;
  FESimple::SpriteBase *result = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::SpriteBase",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FESimple::SpriteBase::SpriteBase",1,"FESimple::SpawnParams const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("new_SpriteBase",1,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (FESimple::SpriteBase *)new FESimple::SpriteBase((FESimple::SpawnParams const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SpriteBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SpriteBase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = 0 ;
  FESimple::SpawnParams *arg2 = 0 ;
  FESimple::SpriteBase *result = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::SpriteBase",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FESimple::SpriteBase::SpriteBase",1,"cocos2d::CCPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteBase::SpriteBase",2,"FESimple::SpawnParams const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("new_SpriteBase",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("new_SpriteBase",2,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (FESimple::SpriteBase *)new FESimple::SpriteBase((cocos2d::CCPoint const &)*arg1,(FESimple::SpawnParams const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SpriteBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SpriteBase(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SpriteBase__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SpriteBase__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cocos2d__CCPoint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_SpriteBase__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SpriteBase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FESimple::SpriteBase::SpriteBase()\n"
    "    FESimple::SpriteBase::SpriteBase(FESimple::SpawnParams const &)\n"
    "    FESimple::SpriteBase::SpriteBase(cocos2d::CCPoint const &,FESimple::SpawnParams const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SpriteBase_added_to_game(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  FESimple::GameBase *arg2 = (FESimple::GameBase *) 0 ;
  FESimple::Name *arg3 = 0 ;
  FESimple::Name temp3 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::added_to_game",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::added_to_game",1,"FESimple::SpriteBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::SpriteBase::added_to_game",2,"FESimple::GameBase *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("FESimple::SpriteBase::added_to_game",3,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_added_to_game",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("SpriteBase_added_to_game",2,SWIGTYPE_p_FESimple__GameBase);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->added_to_game(arg2,(FESimple::Name const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_removed_from_game(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  FESimple::GameBase *arg2 = (FESimple::GameBase *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::removed_from_game",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::removed_from_game",1,"FESimple::SpriteBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::SpriteBase::removed_from_game",2,"FESimple::GameBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_removed_from_game",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("SpriteBase_removed_from_game",2,SWIGTYPE_p_FESimple__GameBase);
  }
  
  (arg1)->removed_from_game(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_remove_all_component(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::remove_all_component",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::remove_all_component",1,"FESimple::SpriteBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_remove_all_component",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  (arg1)->remove_all_component();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_add_component(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  FESimple::SpriteComponent *arg2 = (FESimple::SpriteComponent *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::add_component",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::add_component",1,"FESimple::SpriteBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::SpriteBase::add_component",2,"FESimple::SpriteComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_add_component",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteBase_add_component",2,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  (arg1)->add_component(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_remove_component(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  FESimple::SpriteComponent *arg2 = (FESimple::SpriteComponent *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::remove_component",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::remove_component",1,"FESimple::SpriteBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::SpriteBase::remove_component",2,"FESimple::SpriteComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_remove_component",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteBase_remove_component",2,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  (arg1)->remove_component(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_component(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  unsigned int arg2 ;
  FESimple::SpriteComponent *result = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::component",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::component",1,"FESimple::SpriteBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::SpriteBase::component",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_component",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (FESimple::SpriteComponent *)(arg1)->component(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SpriteComponent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_component_count(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("FESimple::SpriteBase::component_count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::component_count",1,"FESimple::SpriteBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_component_count",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  result = (unsigned int)(arg1)->component_count();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_get_components(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  std::vector< FESimple::SpriteComponent * > *result = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::get_components",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::get_components",1,"FESimple::SpriteBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_get_components",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  result = (std::vector< FESimple::SpriteComponent * > *) &(arg1)->get_components();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__SpriteComponent_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_begin_contact(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::begin_contact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::begin_contact",1,"FESimple::SpriteBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::SpriteBase::begin_contact",2,"b2Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_begin_contact",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_b2Contact,0))){
    SWIG_fail_ptr("SpriteBase_begin_contact",2,SWIGTYPE_p_b2Contact);
  }
  
  (arg1)->begin_contact(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_end_contact(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::end_contact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::end_contact",1,"FESimple::SpriteBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::SpriteBase::end_contact",2,"b2Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_end_contact",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_b2Contact,0))){
    SWIG_fail_ptr("SpriteBase_end_contact",2,SWIGTYPE_p_b2Contact);
  }
  
  (arg1)->end_contact(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_update(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::update",1,"FESimple::SpriteBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::SpriteBase::update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_update",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_set_position(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  cocos2d::CCPoint arg2 ;
  cocos2d::CCPoint *argp2 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::set_position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::set_position",1,"FESimple::SpriteBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteBase::set_position",2,"cocos2d::CCPoint");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_set_position",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("SpriteBase_set_position",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  arg2 = *argp2;
  
  (arg1)->set_position(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBase_set_rotation(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::SpriteBase::set_rotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteBase::set_rotation",1,"FESimple::SpriteBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::SpriteBase::set_rotation",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteBase,0))){
    SWIG_fail_ptr("SpriteBase_set_rotation",1,SWIGTYPE_p_FESimple__SpriteBase);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->set_rotation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SpriteBase(void *obj) {
FESimple::SpriteBase *arg1 = (FESimple::SpriteBase *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_SpriteBase_methods[] = {
    {"get_class_info", _wrap_SpriteBase_get_class_info}, 
    {"added_to_game", _wrap_SpriteBase_added_to_game}, 
    {"removed_from_game", _wrap_SpriteBase_removed_from_game}, 
    {"remove_all_component", _wrap_SpriteBase_remove_all_component}, 
    {"add_component", _wrap_SpriteBase_add_component}, 
    {"remove_component", _wrap_SpriteBase_remove_component}, 
    {"component", _wrap_SpriteBase_component}, 
    {"component_count", _wrap_SpriteBase_component_count}, 
    {"get_components", _wrap_SpriteBase_get_components}, 
    {"begin_contact", _wrap_SpriteBase_begin_contact}, 
    {"end_contact", _wrap_SpriteBase_end_contact}, 
    {"update", _wrap_SpriteBase_update}, 
    {"set_position", _wrap_SpriteBase_set_position}, 
    {"set_rotation", _wrap_SpriteBase_set_rotation}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_SpriteBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_FESimple_SpriteBase_bases[] = {0,0};
static const char *swig_FESimple_SpriteBase_base_names[] = {"FESimple::GameObjBase *",0};
static swig_lua_class _wrap_class_FESimple_SpriteBase = { "SpriteBase", &SWIGTYPE_p_FESimple__SpriteBase,_wrap_new_SpriteBase, swig_delete_SpriteBase, swig_FESimple_SpriteBase_methods, swig_FESimple_SpriteBase_attributes, swig_FESimple_SpriteBase_bases, swig_FESimple_SpriteBase_base_names };

static int _wrap_new_GameBase(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameBase::GameBase",0,0)
  result = (FESimple::GameBase *)new FESimple::GameBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__GameBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameBase_update(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::GameBase::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameBase::update",1,"FESimple::GameBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::GameBase::update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameBase_update",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameBase_clean(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  
  SWIG_check_num_args("FESimple::GameBase::clean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameBase::clean",1,"FESimple::GameBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameBase_clean",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  (arg1)->clean();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameBase_add_game_object(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  SwigValueWrapper< std::shared_ptr< FESimple::GameObjBase > > arg2 ;
  FESimple::Name *arg3 = 0 ;
  FESimple::GameObjPtr *argp2 ;
  FESimple::Name temp3 ;
  
  SWIG_check_num_args("FESimple::GameBase::add_game_object",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameBase::add_game_object",1,"FESimple::GameBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::GameBase::add_game_object",2,"FESimple::GameObjPtr");
  if(!lua_isstring(L,3)) SWIG_fail_arg("FESimple::GameBase::add_game_object",3,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameBase_add_game_object",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_FESimple__GameObjBase_t,0))){
    SWIG_fail_ptr("GameBase_add_game_object",2,SWIGTYPE_p_std__shared_ptrT_FESimple__GameObjBase_t);
  }
  arg2 = *argp2;
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->add_game_object(arg2,(FESimple::Name const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameBase_remove_game_object(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  SwigValueWrapper< std::shared_ptr< FESimple::GameObjBase > > arg2 ;
  FESimple::GameObjPtr *argp2 ;
  
  SWIG_check_num_args("FESimple::GameBase::remove_game_object",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameBase::remove_game_object",1,"FESimple::GameBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::GameBase::remove_game_object",2,"FESimple::GameObjPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameBase_remove_game_object",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_FESimple__GameObjBase_t,0))){
    SWIG_fail_ptr("GameBase_remove_game_object",2,SWIGTYPE_p_std__shared_ptrT_FESimple__GameObjBase_t);
  }
  arg2 = *argp2;
  
  (arg1)->remove_game_object(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameBase_get_scene(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  FESimple::GameScene *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameBase::get_scene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameBase::get_scene",1,"FESimple::GameBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameBase_get_scene",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  result = (FESimple::GameScene *)(arg1)->get_scene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__GameScene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameBase_get_phy_world(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  b2World *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameBase::get_phy_world",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameBase::get_phy_world",1,"FESimple::GameBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameBase_get_phy_world",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  result = (b2World *)(arg1)->get_phy_world();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_b2World,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameBase_get_level(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  FESimple::LevelBase *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameBase::get_level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameBase::get_level",1,"FESimple::GameBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameBase_get_level",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  result = (FESimple::LevelBase *)(arg1)->get_level();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__LevelBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameBase_is_editor(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("FESimple::GameBase::is_editor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameBase::is_editor",1,"FESimple::GameBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameBase_is_editor",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  result = (bool)(arg1)->is_editor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameBase_get_obj(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  FESimple::Name *arg2 = 0 ;
  FESimple::Name temp2 ;
  SwigValueWrapper< std::shared_ptr< FESimple::GameObjBase > > result;
  
  SWIG_check_num_args("FESimple::GameBase::get_obj",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameBase::get_obj",1,"FESimple::GameBase *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::GameBase::get_obj",2,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameBase_get_obj",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->get_obj((FESimple::Name const &)*arg2);
  {
    FESimple::GameObjPtr * resultptr = new FESimple::GameObjPtr((const FESimple::GameObjPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_FESimple__GameObjBase_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameBase_get_objects(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  std::list< FESimple::GameObjPtr > *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameBase::get_objects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameBase::get_objects",1,"FESimple::GameBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("GameBase_get_objects",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  result = (std::list< FESimple::GameObjPtr > *) &(arg1)->get_objects();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_std__shared_ptrT_FESimple__GameObjBase_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GameBase(void *obj) {
FESimple::GameBase *arg1 = (FESimple::GameBase *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_GameBase_methods[] = {
    {"update", _wrap_GameBase_update}, 
    {"clean", _wrap_GameBase_clean}, 
    {"add_game_object", _wrap_GameBase_add_game_object}, 
    {"remove_game_object", _wrap_GameBase_remove_game_object}, 
    {"get_scene", _wrap_GameBase_get_scene}, 
    {"get_phy_world", _wrap_GameBase_get_phy_world}, 
    {"get_level", _wrap_GameBase_get_level}, 
    {"is_editor", _wrap_GameBase_is_editor}, 
    {"get_obj", _wrap_GameBase_get_obj}, 
    {"get_objects", _wrap_GameBase_get_objects}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_GameBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_FESimple_GameBase_bases[] = {0};
static const char *swig_FESimple_GameBase_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_GameBase = { "GameBase", &SWIGTYPE_p_FESimple__GameBase,_wrap_new_GameBase, swig_delete_GameBase, swig_FESimple_GameBase_methods, swig_FESimple_GameBase_attributes, swig_FESimple_GameBase_bases, swig_FESimple_GameBase_base_names };

static int _wrap_LevelTrigger_progress_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelTrigger *arg1 = (FESimple::LevelTrigger *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::LevelTrigger::progress",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelTrigger::progress",1,"FESimple::LevelTrigger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::LevelTrigger::progress",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelTrigger,0))){
    SWIG_fail_ptr("LevelTrigger_progress_set",1,SWIGTYPE_p_FESimple__LevelTrigger);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->progress = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelTrigger_progress_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelTrigger *arg1 = (FESimple::LevelTrigger *) 0 ;
  float result;
  
  SWIG_check_num_args("FESimple::LevelTrigger::progress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelTrigger::progress",1,"FESimple::LevelTrigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelTrigger,0))){
    SWIG_fail_ptr("LevelTrigger_progress_get",1,SWIGTYPE_p_FESimple__LevelTrigger);
  }
  
  result = (float) ((arg1)->progress);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelTrigger_params_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelTrigger *arg1 = (FESimple::LevelTrigger *) 0 ;
  std::map< FESimple::Name,std::string > *arg2 = (std::map< FESimple::Name,std::string > *) 0 ;
  
  SWIG_check_num_args("FESimple::LevelTrigger::params",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelTrigger::params",1,"FESimple::LevelTrigger *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::LevelTrigger::params",2,"std::map< FESimple::Name,std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelTrigger,0))){
    SWIG_fail_ptr("LevelTrigger_params_set",1,SWIGTYPE_p_FESimple__LevelTrigger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("LevelTrigger_params_set",2,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  if (arg1) (arg1)->params = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelTrigger_params_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelTrigger *arg1 = (FESimple::LevelTrigger *) 0 ;
  std::map< FESimple::Name,std::string > *result = 0 ;
  
  SWIG_check_num_args("FESimple::LevelTrigger::params",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelTrigger::params",1,"FESimple::LevelTrigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelTrigger,0))){
    SWIG_fail_ptr("LevelTrigger_params_get",1,SWIGTYPE_p_FESimple__LevelTrigger);
  }
  
  result = (std::map< FESimple::Name,std::string > *)& ((arg1)->params);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LevelTrigger(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelTrigger *result = 0 ;
  
  SWIG_check_num_args("FESimple::LevelTrigger::LevelTrigger",0,0)
  result = (FESimple::LevelTrigger *)new FESimple::LevelTrigger();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__LevelTrigger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LevelTrigger(void *obj) {
FESimple::LevelTrigger *arg1 = (FESimple::LevelTrigger *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_LevelTrigger_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_LevelTrigger_attributes[] = {
    { "progress", _wrap_LevelTrigger_progress_get, _wrap_LevelTrigger_progress_set},
    { "params", _wrap_LevelTrigger_params_get, _wrap_LevelTrigger_params_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_LevelTrigger_bases[] = {0};
static const char *swig_FESimple_LevelTrigger_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_LevelTrigger = { "LevelTrigger", &SWIGTYPE_p_FESimple__LevelTrigger,_wrap_new_LevelTrigger, swig_delete_LevelTrigger, swig_FESimple_LevelTrigger_methods, swig_FESimple_LevelTrigger_attributes, swig_FESimple_LevelTrigger_bases, swig_FESimple_LevelTrigger_base_names };

static int _wrap_LevelBound_rect_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelBound *arg1 = (FESimple::LevelBound *) 0 ;
  cocos2d::CCRect *arg2 = (cocos2d::CCRect *) 0 ;
  
  SWIG_check_num_args("FESimple::LevelBound::rect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelBound::rect",1,"FESimple::LevelBound *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::LevelBound::rect",2,"cocos2d::CCRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelBound,0))){
    SWIG_fail_ptr("LevelBound_rect_set",1,SWIGTYPE_p_FESimple__LevelBound);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCRect,0))){
    SWIG_fail_ptr("LevelBound_rect_set",2,SWIGTYPE_p_cocos2d__CCRect);
  }
  
  if (arg1) (arg1)->rect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelBound_rect_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelBound *arg1 = (FESimple::LevelBound *) 0 ;
  cocos2d::CCRect *result = 0 ;
  
  SWIG_check_num_args("FESimple::LevelBound::rect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelBound::rect",1,"FESimple::LevelBound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelBound,0))){
    SWIG_fail_ptr("LevelBound_rect_get",1,SWIGTYPE_p_FESimple__LevelBound);
  }
  
  result = (cocos2d::CCRect *)& ((arg1)->rect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LevelBound(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelBound *result = 0 ;
  
  SWIG_check_num_args("FESimple::LevelBound::LevelBound",0,0)
  result = (FESimple::LevelBound *)new FESimple::LevelBound();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__LevelBound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LevelBound(void *obj) {
FESimple::LevelBound *arg1 = (FESimple::LevelBound *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_LevelBound_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_LevelBound_attributes[] = {
    { "rect", _wrap_LevelBound_rect_get, _wrap_LevelBound_rect_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_LevelBound_bases[] = {0};
static const char *swig_FESimple_LevelBound_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_LevelBound = { "LevelBound", &SWIGTYPE_p_FESimple__LevelBound,_wrap_new_LevelBound, swig_delete_LevelBound, swig_FESimple_LevelBound_methods, swig_FESimple_LevelBound_attributes, swig_FESimple_LevelBound_bases, swig_FESimple_LevelBound_base_names };

static int _wrap_new_LevelData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelData *result = 0 ;
  
  SWIG_check_num_args("FESimple::LevelData::LevelData",0,0)
  result = (FESimple::LevelData *)new FESimple::LevelData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__LevelData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LevelData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  FESimple::LevelData *result = 0 ;
  
  SWIG_check_num_args("FESimple::LevelData::LevelData",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::LevelData::LevelData",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (FESimple::LevelData *)new FESimple::LevelData((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__LevelData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LevelData(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LevelData__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_LevelData__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LevelData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FESimple::LevelData::LevelData()\n"
    "    FESimple::LevelData::LevelData(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LevelData_load(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelData *arg1 = (FESimple::LevelData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("FESimple::LevelData::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelData::load",1,"FESimple::LevelData *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::LevelData::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelData,0))){
    SWIG_fail_ptr("LevelData_load",1,SWIGTYPE_p_FESimple__LevelData);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->load((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelData_clear(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelData *arg1 = (FESimple::LevelData *) 0 ;
  
  SWIG_check_num_args("FESimple::LevelData::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelData::clear",1,"FESimple::LevelData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelData,0))){
    SWIG_fail_ptr("LevelData_clear",1,SWIGTYPE_p_FESimple__LevelData);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelData_bound_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelData *arg1 = (FESimple::LevelData *) 0 ;
  FESimple::LevelBound *arg2 = (FESimple::LevelBound *) 0 ;
  
  SWIG_check_num_args("FESimple::LevelData::bound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelData::bound",1,"FESimple::LevelData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::LevelData::bound",2,"FESimple::LevelBound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelData,0))){
    SWIG_fail_ptr("LevelData_bound_set",1,SWIGTYPE_p_FESimple__LevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__LevelBound,0))){
    SWIG_fail_ptr("LevelData_bound_set",2,SWIGTYPE_p_FESimple__LevelBound);
  }
  
  if (arg1) (arg1)->bound = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelData_bound_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelData *arg1 = (FESimple::LevelData *) 0 ;
  FESimple::LevelBound *result = 0 ;
  
  SWIG_check_num_args("FESimple::LevelData::bound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelData::bound",1,"FESimple::LevelData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelData,0))){
    SWIG_fail_ptr("LevelData_bound_get",1,SWIGTYPE_p_FESimple__LevelData);
  }
  
  result = (FESimple::LevelBound *)& ((arg1)->bound);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__LevelBound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelData_triggers_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelData *arg1 = (FESimple::LevelData *) 0 ;
  std::vector< FESimple::LevelTrigger > *arg2 = (std::vector< FESimple::LevelTrigger > *) 0 ;
  
  SWIG_check_num_args("FESimple::LevelData::triggers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelData::triggers",1,"FESimple::LevelData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::LevelData::triggers",2,"std::vector< FESimple::LevelTrigger > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelData,0))){
    SWIG_fail_ptr("LevelData_triggers_set",1,SWIGTYPE_p_FESimple__LevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_FESimple__LevelTrigger_t,0))){
    SWIG_fail_ptr("LevelData_triggers_set",2,SWIGTYPE_p_std__vectorT_FESimple__LevelTrigger_t);
  }
  
  if (arg1) (arg1)->triggers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelData_triggers_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelData *arg1 = (FESimple::LevelData *) 0 ;
  std::vector< FESimple::LevelTrigger > *result = 0 ;
  
  SWIG_check_num_args("FESimple::LevelData::triggers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelData::triggers",1,"FESimple::LevelData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelData,0))){
    SWIG_fail_ptr("LevelData_triggers_get",1,SWIGTYPE_p_FESimple__LevelData);
  }
  
  result = (std::vector< FESimple::LevelTrigger > *)& ((arg1)->triggers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__LevelTrigger_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LevelData(void *obj) {
FESimple::LevelData *arg1 = (FESimple::LevelData *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_LevelData_methods[] = {
    {"load", _wrap_LevelData_load}, 
    {"clear", _wrap_LevelData_clear}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_LevelData_attributes[] = {
    { "bound", _wrap_LevelData_bound_get, _wrap_LevelData_bound_set},
    { "triggers", _wrap_LevelData_triggers_get, _wrap_LevelData_triggers_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_LevelData_bases[] = {0};
static const char *swig_FESimple_LevelData_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_LevelData = { "LevelData", &SWIGTYPE_p_FESimple__LevelData,_wrap_new_LevelData, swig_delete_LevelData, swig_FESimple_LevelData_methods, swig_FESimple_LevelData_attributes, swig_FESimple_LevelData_bases, swig_FESimple_LevelData_base_names };

static int _wrap_LevelBase_attach(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelBase *arg1 = (FESimple::LevelBase *) 0 ;
  FESimple::LevelData *arg2 = (FESimple::LevelData *) 0 ;
  bool result;
  
  SWIG_check_num_args("FESimple::LevelBase::attach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelBase::attach",1,"FESimple::LevelBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::LevelBase::attach",2,"FESimple::LevelData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelBase,0))){
    SWIG_fail_ptr("LevelBase_attach",1,SWIGTYPE_p_FESimple__LevelBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__LevelData,0))){
    SWIG_fail_ptr("LevelBase_attach",2,SWIGTYPE_p_FESimple__LevelData);
  }
  
  result = (bool)(arg1)->attach((FESimple::LevelData const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelBase_reset(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelBase *arg1 = (FESimple::LevelBase *) 0 ;
  
  SWIG_check_num_args("FESimple::LevelBase::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelBase::reset",1,"FESimple::LevelBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelBase,0))){
    SWIG_fail_ptr("LevelBase_reset",1,SWIGTYPE_p_FESimple__LevelBase);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelBase_triggering_trigger(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelBase *arg1 = (FESimple::LevelBase *) 0 ;
  FESimple::LevelTrigger *arg2 = 0 ;
  
  SWIG_check_num_args("FESimple::LevelBase::triggering_trigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelBase::triggering_trigger",1,"FESimple::LevelBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::LevelBase::triggering_trigger",2,"FESimple::LevelTrigger &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelBase,0))){
    SWIG_fail_ptr("LevelBase_triggering_trigger",1,SWIGTYPE_p_FESimple__LevelBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__LevelTrigger,0))){
    SWIG_fail_ptr("LevelBase_triggering_trigger",2,SWIGTYPE_p_FESimple__LevelTrigger);
  }
  
  (arg1)->triggering_trigger(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelBase_update(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelBase *arg1 = (FESimple::LevelBase *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::LevelBase::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelBase::update",1,"FESimple::LevelBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::LevelBase::update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelBase,0))){
    SWIG_fail_ptr("LevelBase_update",1,SWIGTYPE_p_FESimple__LevelBase);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LevelBase_get_bound(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelBase *arg1 = (FESimple::LevelBase *) 0 ;
  FESimple::LevelBound *result = 0 ;
  
  SWIG_check_num_args("FESimple::LevelBase::get_bound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::LevelBase::get_bound",1,"FESimple::LevelBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__LevelBase,0))){
    SWIG_fail_ptr("LevelBase_get_bound",1,SWIGTYPE_p_FESimple__LevelBase);
  }
  
  result = (FESimple::LevelBound *) &(arg1)->get_bound();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__LevelBound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LevelBase(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::LevelBase *result = 0 ;
  
  SWIG_check_num_args("FESimple::LevelBase::LevelBase",0,0)
  result = (FESimple::LevelBase *)new FESimple::LevelBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__LevelBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LevelBase(void *obj) {
FESimple::LevelBase *arg1 = (FESimple::LevelBase *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_LevelBase_methods[] = {
    {"attach", _wrap_LevelBase_attach}, 
    {"reset", _wrap_LevelBase_reset}, 
    {"triggering_trigger", _wrap_LevelBase_triggering_trigger}, 
    {"update", _wrap_LevelBase_update}, 
    {"get_bound", _wrap_LevelBase_get_bound}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_LevelBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_FESimple_LevelBase_bases[] = {0};
static const char *swig_FESimple_LevelBase_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_LevelBase = { "LevelBase", &SWIGTYPE_p_FESimple__LevelBase,_wrap_new_LevelBase, swig_delete_LevelBase, swig_FESimple_LevelBase_methods, swig_FESimple_LevelBase_attributes, swig_FESimple_LevelBase_bases, swig_FESimple_LevelBase_base_names };

static int _wrap_Pi_set(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("FESimple::Pi",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FESimple::Pi",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  FESimple::Pi = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pi_get(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("FESimple::Pi",0,0)
  result = (float)FESimple::Pi;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_current_time(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("FESimple::current_time",0,0)
  result = (float)FESimple::current_time();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_set_current_time(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("FESimple::set_current_time",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FESimple::set_current_time",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  FESimple::set_current_time(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_point(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("FESimple::string_to_point",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("FESimple::string_to_point",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = FESimple::string_to_point((char const *)arg1);
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_point_to_string(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint arg1 ;
  cocos2d::CCPoint *argp1 ;
  std::string result;
  
  SWIG_check_num_args("FESimple::point_to_string",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FESimple::point_to_string",1,"cocos2d::CCPoint const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("point_to_string",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  arg1 = *argp1;
  
  result = FESimple::point_to_string(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_rect(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  cocos2d::CCRect result;
  
  SWIG_check_num_args("FESimple::string_to_rect",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("FESimple::string_to_rect",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = FESimple::string_to_rect((char const *)arg1);
  {
    cocos2d::CCRect * resultptr = new cocos2d::CCRect((const cocos2d::CCRect &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCRect,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_split_string(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("FESimple::split_string",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::split_string",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::split_string",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = FESimple::split_string((std::string const &)*arg1,(std::string const &)*arg2);
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_str_to_joint_type(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  b2JointType result;
  
  SWIG_check_num_args("FESimple::str_to_joint_type",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("FESimple::str_to_joint_type",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = FESimple::str_to_joint_type((char const *)arg1);
  {
    b2JointType * resultptr = new b2JointType((const b2JointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_b2JointType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_full_path(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string result;
  
  SWIG_check_num_args("FESimple::full_path",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("FESimple::full_path",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = FESimple::full_path((char const *)arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_file_name_from_path(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("FESimple::file_name_from_path",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::file_name_from_path",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = FESimple::file_name_from_path((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_file_extension_from_path(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("FESimple::file_extension_from_path",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::file_extension_from_path",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = FESimple::file_extension_from_path((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_relative_path_to_app(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("FESimple::relative_path_to_app",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::relative_path_to_app",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = FESimple::relative_path_to_app((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_floats(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  SwigValueWrapper< std::vector< float > > result;
  
  SWIG_check_num_args("FESimple::string_to_floats",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::string_to_floats",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = FESimple::string_to_floats((std::string const &)*arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_b2Vec(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  b2Vec2 result;
  
  SWIG_check_num_args("FESimple::string_to_b2Vec",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::string_to_b2Vec",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = FESimple::string_to_b2Vec((std::string const &)*arg1);
  {
    b2Vec2 * resultptr = new b2Vec2((const b2Vec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_b2Vec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_b2BodyType(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  b2BodyType result;
  
  SWIG_check_num_args("FESimple::string_to_b2BodyType",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::string_to_b2BodyType",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = FESimple::string_to_b2BodyType((std::string const &)*arg1);
  {
    b2BodyType * resultptr = new b2BodyType((const b2BodyType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_b2BodyType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_set_game(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *arg1 = (FESimple::GameBase *) 0 ;
  
  SWIG_check_num_args("FESimple::set_game",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::set_game",1,"FESimple::GameBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameBase,0))){
    SWIG_fail_ptr("set_game",1,SWIGTYPE_p_FESimple__GameBase);
  }
  
  FESimple::set_game(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_game(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameBase *result = 0 ;
  
  SWIG_check_num_args("FESimple::get_game",0,0)
  result = (FESimple::GameBase *)FESimple::get_game();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__GameBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ptm_ratio(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("FESimple::ptm_ratio",0,0)
  result = (float)FESimple::ptm_ratio();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_point_to_b2Vec2(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = 0 ;
  b2Vec2 result;
  
  SWIG_check_num_args("FESimple::point_to_b2Vec2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FESimple::point_to_b2Vec2",1,"cocos2d::CCPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("point_to_b2Vec2",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  result = FESimple::point_to_b2Vec2((cocos2d::CCPoint const &)*arg1);
  {
    b2Vec2 * resultptr = new b2Vec2((const b2Vec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_b2Vec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_b2Vec2_to_point(lua_State* L) {
  int SWIG_arg = 0;
  b2Vec2 *arg1 = 0 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("FESimple::b2Vec2_to_point",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FESimple::b2Vec2_to_point",1,"b2Vec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_b2Vec2,0))){
    SWIG_fail_ptr("b2Vec2_to_point",1,SWIGTYPE_p_b2Vec2);
  }
  
  result = FESimple::b2Vec2_to_point((b2Vec2 const &)*arg1);
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___add(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = 0 ;
  cocos2d::CCPoint arg2 ;
  cocos2d::CCPoint *argp2 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("FESimple::operator +",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FESimple::operator +",1,"cocos2d::CCPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::operator +",2,"cocos2d::CCPoint const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("__add",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("__add",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  arg2 = *argp2;
  
  result = FESimple::operator +((cocos2d::CCPoint const &)*arg1,arg2);
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___sub(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = 0 ;
  cocos2d::CCPoint arg2 ;
  cocos2d::CCPoint *argp2 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("FESimple::operator -",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FESimple::operator -",1,"cocos2d::CCPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::operator -",2,"cocos2d::CCPoint const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("__sub",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("__sub",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  arg2 = *argp2;
  
  result = FESimple::operator -((cocos2d::CCPoint const &)*arg1,arg2);
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_angle_to_rad(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("FESimple::angle_to_rad",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FESimple::angle_to_rad",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)FESimple::angle_to_rad(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rad_to_angle(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("FESimple::rad_to_angle",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FESimple::rad_to_angle",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)FESimple::rad_to_angle(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("FESimple::random",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FESimple::random",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::random",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)FESimple::random(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("FESimple::random",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FESimple::random",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)FESimple::random(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("FESimple::random",0,0)
  result = (float)FESimple::random();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_random__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_random__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_random__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FESimple::random(float,float)\n"
    "    FESimple::random(float)\n"
    "    FESimple::random()\n");
  lua_error(L);return 0;
}


static int _wrap_random_dir__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("FESimple::random_dir",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FESimple::random_dir",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::random_dir",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = FESimple::random_dir(arg1,arg2);
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random_dir__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("FESimple::random_dir",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FESimple::random_dir",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = FESimple::random_dir(arg1);
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random_dir__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint result;
  
  SWIG_check_num_args("FESimple::random_dir",0,0)
  result = FESimple::random_dir();
  {
    cocos2d::CCPoint * resultptr = new cocos2d::CCPoint((const cocos2d::CCPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCPoint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random_dir(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_random_dir__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_random_dir__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_random_dir__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'random_dir'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FESimple::random_dir(float,float)\n"
    "    FESimple::random_dir(float)\n"
    "    FESimple::random_dir()\n");
  lua_error(L);return 0;
}


static int _wrap_GameInfo_add_controller(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameInfo *arg1 = (FESimple::GameInfo *) 0 ;
  FESimple::ControllerBase *arg2 = (FESimple::ControllerBase *) 0 ;
  
  SWIG_check_num_args("FESimple::GameInfo::add_controller",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameInfo::add_controller",1,"FESimple::GameInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::GameInfo::add_controller",2,"FESimple::ControllerBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameInfo,0))){
    SWIG_fail_ptr("GameInfo_add_controller",1,SWIGTYPE_p_FESimple__GameInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__ControllerBase,0))){
    SWIG_fail_ptr("GameInfo_add_controller",2,SWIGTYPE_p_FESimple__ControllerBase);
  }
  
  (arg1)->add_controller(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_game_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameInfo *arg1 = (FESimple::GameInfo *) 0 ;
  FESimple::GameBase *arg2 = (FESimple::GameBase *) 0 ;
  
  SWIG_check_num_args("FESimple::GameInfo::game",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameInfo::game",1,"FESimple::GameInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::GameInfo::game",2,"FESimple::GameBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameInfo,0))){
    SWIG_fail_ptr("GameInfo_game_set",1,SWIGTYPE_p_FESimple__GameInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__GameBase,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("GameInfo_game_set",2,SWIGTYPE_p_FESimple__GameBase);
  }
  
  if (arg1) (arg1)->game = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_game_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameInfo *arg1 = (FESimple::GameInfo *) 0 ;
  FESimple::GameBase *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameInfo::game",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameInfo::game",1,"FESimple::GameInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameInfo,0))){
    SWIG_fail_ptr("GameInfo_game_get",1,SWIGTYPE_p_FESimple__GameInfo);
  }
  
  result = (FESimple::GameBase *) ((arg1)->game);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__GameBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_controllers_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameInfo *arg1 = (FESimple::GameInfo *) 0 ;
  std::vector< FESimple::ControllerBase * > *arg2 = (std::vector< FESimple::ControllerBase * > *) 0 ;
  
  SWIG_check_num_args("FESimple::GameInfo::controllers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameInfo::controllers",1,"FESimple::GameInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::GameInfo::controllers",2,"std::vector< FESimple::ControllerBase * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameInfo,0))){
    SWIG_fail_ptr("GameInfo_controllers_set",1,SWIGTYPE_p_FESimple__GameInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0))){
    SWIG_fail_ptr("GameInfo_controllers_set",2,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t);
  }
  
  if (arg1) (arg1)->controllers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_controllers_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameInfo *arg1 = (FESimple::GameInfo *) 0 ;
  std::vector< FESimple::ControllerBase * > *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameInfo::controllers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameInfo::controllers",1,"FESimple::GameInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameInfo,0))){
    SWIG_fail_ptr("GameInfo_controllers_get",1,SWIGTYPE_p_FESimple__GameInfo);
  }
  
  result = (std::vector< FESimple::ControllerBase * > *)& ((arg1)->controllers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__ControllerBase_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GameInfo(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameInfo *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameInfo::GameInfo",0,0)
  result = (FESimple::GameInfo *)new FESimple::GameInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__GameInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GameInfo(void *obj) {
FESimple::GameInfo *arg1 = (FESimple::GameInfo *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_GameInfo_methods[] = {
    {"add_controller", _wrap_GameInfo_add_controller}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_GameInfo_attributes[] = {
    { "game", _wrap_GameInfo_game_get, _wrap_GameInfo_game_set},
    { "controllers", _wrap_GameInfo_controllers_get, _wrap_GameInfo_controllers_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_GameInfo_bases[] = {0};
static const char *swig_FESimple_GameInfo_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_GameInfo = { "GameInfo", &SWIGTYPE_p_FESimple__GameInfo,_wrap_new_GameInfo, swig_delete_GameInfo, swig_FESimple_GameInfo_methods, swig_FESimple_GameInfo_attributes, swig_FESimple_GameInfo_bases, swig_FESimple_GameInfo_base_names };

static int _wrap_g_game_info_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameInfo *arg1 = (FESimple::GameInfo *) 0 ;
  
  SWIG_check_num_args("FESimple::g_game_info",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::g_game_info",1,"FESimple::GameInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameInfo,0))){
    SWIG_fail_ptr("g_game_info_set",1,SWIGTYPE_p_FESimple__GameInfo);
  }
  
  FESimple::g_game_info = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_g_game_info_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameInfo *result = 0 ;
  
  SWIG_check_num_args("FESimple::g_game_info",0,0)
  result = (FESimple::GameInfo *)&FESimple::g_game_info;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__GameInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_game_info(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameInfo *result = 0 ;
  
  SWIG_check_num_args("FESimple::get_game_info",0,0)
  result = (FESimple::GameInfo *)FESimple::get_game_info();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__GameInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_gameobj_ptr(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjBase *arg1 = (FESimple::GameObjBase *) 0 ;
  SwigValueWrapper< std::shared_ptr< FESimple::GameObjBase > > result;
  
  SWIG_check_num_args("FESimple::make_gameobj_ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::make_gameobj_ptr",1,"FESimple::GameObjBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__GameObjBase,0))){
    SWIG_fail_ptr("make_gameobj_ptr",1,SWIGTYPE_p_FESimple__GameObjBase);
  }
  
  result = FESimple::make_gameobj_ptr(arg1);
  {
    FESimple::GameObjPtr * resultptr = new FESimple::GameObjPtr((const FESimple::GameObjPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_FESimple__GameObjBase_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_init_python(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  bool result;
  
  SWIG_check_num_args("FESimple::init_python",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::init_python",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (bool)FESimple::init_python((std::string const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ends_with(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("FESimple::ends_with",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::ends_with",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::ends_with",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)FESimple::ends_with((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_register_FEX_classes(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("FESimple::register_FEX_classes",0,0)
  FESimple::register_FEX_classes();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjFactory_construct_obj(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::Name *arg1 = 0 ;
  FESimple::SpawnParams *arg2 = 0 ;
  FESimple::Name temp1 ;
  SwigValueWrapper< std::shared_ptr< FESimple::GameObjBase > > result;
  
  SWIG_check_num_args("FESimple::GameObjFactory::construct_obj",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::GameObjFactory::construct_obj",1,"FESimple::Name const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::GameObjFactory::construct_obj",2,"FESimple::SpawnParams const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("GameObjFactory_construct_obj",2,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = FESimple::GameObjFactory::construct_obj((std::string const &)*arg1,(std::map< std::string,std::string > const &)*arg2);
  {
    FESimple::GameObjPtr * resultptr = new FESimple::GameObjPtr((const FESimple::GameObjPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_FESimple__GameObjBase_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjFactory_get_all_classes(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,FESimple::ClassInfo const * > *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameObjFactory::get_all_classes",0,0)
  result = (std::map< std::string,FESimple::ClassInfo const * > *) &FESimple::GameObjFactory::get_all_classes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_FESimple__ClassInfo_const_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObjFactory_add_class_info(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ClassInfo *arg1 = (FESimple::ClassInfo *) 0 ;
  
  SWIG_check_num_args("FESimple::GameObjFactory::add_class_info",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::GameObjFactory::add_class_info",1,"FESimple::ClassInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ClassInfo,0))){
    SWIG_fail_ptr("GameObjFactory_add_class_info",1,SWIGTYPE_p_FESimple__ClassInfo);
  }
  
  FESimple::GameObjFactory::add_class_info((FESimple::ClassInfo const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GameObjFactory(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::GameObjFactory *result = 0 ;
  
  SWIG_check_num_args("FESimple::GameObjFactory::GameObjFactory",0,0)
  result = (FESimple::GameObjFactory *)new FESimple::GameObjFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__GameObjFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GameObjFactory(void *obj) {
FESimple::GameObjFactory *arg1 = (FESimple::GameObjFactory *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_GameObjFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_GameObjFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_FESimple_GameObjFactory_bases[] = {0};
static const char *swig_FESimple_GameObjFactory_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_GameObjFactory = { "GameObjFactory", &SWIGTYPE_p_FESimple__GameObjFactory,_wrap_new_GameObjFactory, swig_delete_GameObjFactory, swig_FESimple_GameObjFactory_methods, swig_FESimple_GameObjFactory_attributes, swig_FESimple_GameObjFactory_bases, swig_FESimple_GameObjFactory_base_names };

static int _wrap_ControllerBase_plug(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ControllerBase *arg1 = (FESimple::ControllerBase *) 0 ;
  
  SWIG_check_num_args("FESimple::ControllerBase::plug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ControllerBase::plug",1,"FESimple::ControllerBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ControllerBase,0))){
    SWIG_fail_ptr("ControllerBase_plug",1,SWIGTYPE_p_FESimple__ControllerBase);
  }
  
  (arg1)->plug();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ControllerBase_unplug(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ControllerBase *arg1 = (FESimple::ControllerBase *) 0 ;
  
  SWIG_check_num_args("FESimple::ControllerBase::unplug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ControllerBase::unplug",1,"FESimple::ControllerBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ControllerBase,0))){
    SWIG_fail_ptr("ControllerBase_unplug",1,SWIGTYPE_p_FESimple__ControllerBase);
  }
  
  (arg1)->unplug();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ControllerBase(void *obj) {
FESimple::ControllerBase *arg1 = (FESimple::ControllerBase *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_ControllerBase_methods[] = {
    {"plug", _wrap_ControllerBase_plug}, 
    {"unplug", _wrap_ControllerBase_unplug}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_ControllerBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_FESimple_ControllerBase_bases[] = {0};
static const char *swig_FESimple_ControllerBase_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_ControllerBase = { "ControllerBase", &SWIGTYPE_p_FESimple__ControllerBase,0, swig_delete_ControllerBase, swig_FESimple_ControllerBase_methods, swig_FESimple_ControllerBase_attributes, swig_FESimple_ControllerBase_bases, swig_FESimple_ControllerBase_base_names };

static int _wrap_new_IOSTouchController(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::IOSTouchController *result = 0 ;
  
  SWIG_check_num_args("FESimple::IOSTouchController::IOSTouchController",0,0)
  result = (FESimple::IOSTouchController *)new FESimple::IOSTouchController();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__IOSTouchController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOSTouchController_ccTouchBegan(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::IOSTouchController *arg1 = (FESimple::IOSTouchController *) 0 ;
  cocos2d::CCTouch *arg2 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCEvent *arg3 = (cocos2d::CCEvent *) 0 ;
  bool result;
  
  SWIG_check_num_args("FESimple::IOSTouchController::ccTouchBegan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchBegan",1,"FESimple::IOSTouchController *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchBegan",2,"cocos2d::CCTouch *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchBegan",3,"cocos2d::CCEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__IOSTouchController,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchBegan",1,SWIGTYPE_p_FESimple__IOSTouchController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchBegan",2,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cocos2d__CCEvent,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchBegan",3,SWIGTYPE_p_cocos2d__CCEvent);
  }
  
  result = (bool)(arg1)->ccTouchBegan(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOSTouchController_ccTouchMoved(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::IOSTouchController *arg1 = (FESimple::IOSTouchController *) 0 ;
  cocos2d::CCTouch *arg2 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCEvent *arg3 = (cocos2d::CCEvent *) 0 ;
  
  SWIG_check_num_args("FESimple::IOSTouchController::ccTouchMoved",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchMoved",1,"FESimple::IOSTouchController *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchMoved",2,"cocos2d::CCTouch *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchMoved",3,"cocos2d::CCEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__IOSTouchController,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchMoved",1,SWIGTYPE_p_FESimple__IOSTouchController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchMoved",2,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cocos2d__CCEvent,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchMoved",3,SWIGTYPE_p_cocos2d__CCEvent);
  }
  
  (arg1)->ccTouchMoved(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOSTouchController_ccTouchEnded(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::IOSTouchController *arg1 = (FESimple::IOSTouchController *) 0 ;
  cocos2d::CCTouch *arg2 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCEvent *arg3 = (cocos2d::CCEvent *) 0 ;
  
  SWIG_check_num_args("FESimple::IOSTouchController::ccTouchEnded",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchEnded",1,"FESimple::IOSTouchController *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchEnded",2,"cocos2d::CCTouch *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchEnded",3,"cocos2d::CCEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__IOSTouchController,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchEnded",1,SWIGTYPE_p_FESimple__IOSTouchController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchEnded",2,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cocos2d__CCEvent,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchEnded",3,SWIGTYPE_p_cocos2d__CCEvent);
  }
  
  (arg1)->ccTouchEnded(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOSTouchController_ccTouchCancelled(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::IOSTouchController *arg1 = (FESimple::IOSTouchController *) 0 ;
  cocos2d::CCTouch *arg2 = (cocos2d::CCTouch *) 0 ;
  cocos2d::CCEvent *arg3 = (cocos2d::CCEvent *) 0 ;
  
  SWIG_check_num_args("FESimple::IOSTouchController::ccTouchCancelled",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchCancelled",1,"FESimple::IOSTouchController *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchCancelled",2,"cocos2d::CCTouch *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FESimple::IOSTouchController::ccTouchCancelled",3,"cocos2d::CCEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__IOSTouchController,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchCancelled",1,SWIGTYPE_p_FESimple__IOSTouchController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCTouch,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchCancelled",2,SWIGTYPE_p_cocos2d__CCTouch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cocos2d__CCEvent,0))){
    SWIG_fail_ptr("IOSTouchController_ccTouchCancelled",3,SWIGTYPE_p_cocos2d__CCEvent);
  }
  
  (arg1)->ccTouchCancelled(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOSTouchController_plug(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::IOSTouchController *arg1 = (FESimple::IOSTouchController *) 0 ;
  
  SWIG_check_num_args("FESimple::IOSTouchController::plug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::IOSTouchController::plug",1,"FESimple::IOSTouchController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__IOSTouchController,0))){
    SWIG_fail_ptr("IOSTouchController_plug",1,SWIGTYPE_p_FESimple__IOSTouchController);
  }
  
  (arg1)->plug();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOSTouchController_unplug(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::IOSTouchController *arg1 = (FESimple::IOSTouchController *) 0 ;
  
  SWIG_check_num_args("FESimple::IOSTouchController::unplug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::IOSTouchController::unplug",1,"FESimple::IOSTouchController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__IOSTouchController,0))){
    SWIG_fail_ptr("IOSTouchController_unplug",1,SWIGTYPE_p_FESimple__IOSTouchController);
  }
  
  (arg1)->unplug();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOSTouchController(void *obj) {
FESimple::IOSTouchController *arg1 = (FESimple::IOSTouchController *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_IOSTouchController_methods[] = {
    {"ccTouchBegan", _wrap_IOSTouchController_ccTouchBegan}, 
    {"ccTouchMoved", _wrap_IOSTouchController_ccTouchMoved}, 
    {"ccTouchEnded", _wrap_IOSTouchController_ccTouchEnded}, 
    {"ccTouchCancelled", _wrap_IOSTouchController_ccTouchCancelled}, 
    {"plug", _wrap_IOSTouchController_plug}, 
    {"unplug", _wrap_IOSTouchController_unplug}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_IOSTouchController_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_FESimple_IOSTouchController_bases[] = {0,0};
static const char *swig_FESimple_IOSTouchController_base_names[] = {"FESimple::ControllerBase *",0};
static swig_lua_class _wrap_class_FESimple_IOSTouchController = { "IOSTouchController", &SWIGTYPE_p_FESimple__IOSTouchController,_wrap_new_IOSTouchController, swig_delete_IOSTouchController, swig_FESimple_IOSTouchController_methods, swig_FESimple_IOSTouchController_attributes, swig_FESimple_IOSTouchController_bases, swig_FESimple_IOSTouchController_base_names };

static int _wrap_new_animation(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::Name *arg1 = 0 ;
  cocos2d::CCAnimation *arg2 = (cocos2d::CCAnimation *) 0 ;
  FESimple::Name temp1 ;
  FESimple::animation *result = 0 ;
  
  SWIG_check_num_args("FESimple::animation::animation",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FESimple::animation::animation",1,"FESimple::Name const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::animation::animation",2,"cocos2d::CCAnimation *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCAnimation,0))){
    SWIG_fail_ptr("new_animation",2,SWIGTYPE_p_cocos2d__CCAnimation);
  }
  
  result = (FESimple::animation *)new FESimple::animation((FESimple::Name const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__animation,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_animation_name_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::animation *arg1 = (FESimple::animation *) 0 ;
  FESimple::Name *arg2 = 0 ;
  FESimple::Name temp2 ;
  
  SWIG_check_num_args("FESimple::animation::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::animation::name",1,"FESimple::animation *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::animation::name",2,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__animation,0))){
    SWIG_fail_ptr("animation_name_set",1,SWIGTYPE_p_FESimple__animation);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_animation_name_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::animation *arg1 = (FESimple::animation *) 0 ;
  FESimple::Name *result = 0 ;
  
  SWIG_check_num_args("FESimple::animation::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::animation::name",1,"FESimple::animation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__animation,0))){
    SWIG_fail_ptr("animation_name_get",1,SWIGTYPE_p_FESimple__animation);
  }
  
  result = (FESimple::Name *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_animation_ccanimation_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::animation *arg1 = (FESimple::animation *) 0 ;
  cocos2d::CCAnimation *arg2 = (cocos2d::CCAnimation *) 0 ;
  
  SWIG_check_num_args("FESimple::animation::ccanimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::animation::ccanimation",1,"FESimple::animation *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::animation::ccanimation",2,"cocos2d::CCAnimation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__animation,0))){
    SWIG_fail_ptr("animation_ccanimation_set",1,SWIGTYPE_p_FESimple__animation);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCAnimation,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("animation_ccanimation_set",2,SWIGTYPE_p_cocos2d__CCAnimation);
  }
  
  if (arg1) (arg1)->ccanimation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_animation_ccanimation_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::animation *arg1 = (FESimple::animation *) 0 ;
  cocos2d::CCAnimation *result = 0 ;
  
  SWIG_check_num_args("FESimple::animation::ccanimation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::animation::ccanimation",1,"FESimple::animation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__animation,0))){
    SWIG_fail_ptr("animation_ccanimation_get",1,SWIGTYPE_p_FESimple__animation);
  }
  
  result = (cocos2d::CCAnimation *) ((arg1)->ccanimation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCAnimation,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_animation(void *obj) {
FESimple::animation *arg1 = (FESimple::animation *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_animation_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_animation_attributes[] = {
    { "name", _wrap_animation_name_get, _wrap_animation_name_set},
    { "ccanimation", _wrap_animation_ccanimation_get, _wrap_animation_ccanimation_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_animation_bases[] = {0};
static const char *swig_FESimple_animation_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_animation = { "animation", &SWIGTYPE_p_FESimple__animation,_wrap_new_animation, swig_delete_animation, swig_FESimple_animation_methods, swig_FESimple_animation_attributes, swig_FESimple_animation_bases, swig_FESimple_animation_base_names };

static int _wrap_new_b2fixture_def(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::b2fixture_def *result = 0 ;
  
  SWIG_check_num_args("FESimple::b2fixture_def::b2fixture_def",0,0)
  result = (FESimple::b2fixture_def *)new FESimple::b2fixture_def();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__b2fixture_def,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_b2fixture_def_identity_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::b2fixture_def *arg1 = (FESimple::b2fixture_def *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("FESimple::b2fixture_def::identity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::b2fixture_def::identity",1,"FESimple::b2fixture_def *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::b2fixture_def::identity",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__b2fixture_def,0))){
    SWIG_fail_ptr("b2fixture_def_identity_set",1,SWIGTYPE_p_FESimple__b2fixture_def);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->identity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_b2fixture_def_identity_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::b2fixture_def *arg1 = (FESimple::b2fixture_def *) 0 ;
  int result;
  
  SWIG_check_num_args("FESimple::b2fixture_def::identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::b2fixture_def::identity",1,"FESimple::b2fixture_def *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__b2fixture_def,0))){
    SWIG_fail_ptr("b2fixture_def_identity_get",1,SWIGTYPE_p_FESimple__b2fixture_def);
  }
  
  result = (int) ((arg1)->identity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_b2fixture_def(void *obj) {
FESimple::b2fixture_def *arg1 = (FESimple::b2fixture_def *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_b2fixture_def_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_b2fixture_def_attributes[] = {
    { "identity", _wrap_b2fixture_def_identity_get, _wrap_b2fixture_def_identity_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_b2fixture_def_bases[] = {0};
static const char *swig_FESimple_b2fixture_def_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_b2fixture_def = { "b2fixture_def", &SWIGTYPE_p_FESimple__b2fixture_def,_wrap_new_b2fixture_def, swig_delete_b2fixture_def, swig_FESimple_b2fixture_def_methods, swig_FESimple_b2fixture_def_attributes, swig_FESimple_b2fixture_def_bases, swig_FESimple_b2fixture_def_base_names };

static int _wrap_physic_desc_body_def_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::physic_desc *arg1 = (FESimple::physic_desc *) 0 ;
  b2BodyDef arg2 ;
  b2BodyDef *argp2 ;
  
  SWIG_check_num_args("FESimple::physic_desc::body_def",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::physic_desc::body_def",1,"FESimple::physic_desc *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::physic_desc::body_def",2,"b2BodyDef");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__physic_desc,0))){
    SWIG_fail_ptr("physic_desc_body_def_set",1,SWIGTYPE_p_FESimple__physic_desc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_b2BodyDef,0))){
    SWIG_fail_ptr("physic_desc_body_def_set",2,SWIGTYPE_p_b2BodyDef);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->body_def = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_physic_desc_body_def_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::physic_desc *arg1 = (FESimple::physic_desc *) 0 ;
  b2BodyDef result;
  
  SWIG_check_num_args("FESimple::physic_desc::body_def",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::physic_desc::body_def",1,"FESimple::physic_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__physic_desc,0))){
    SWIG_fail_ptr("physic_desc_body_def_get",1,SWIGTYPE_p_FESimple__physic_desc);
  }
  
  result =  ((arg1)->body_def);
  {
    b2BodyDef * resultptr = new b2BodyDef((const b2BodyDef &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_b2BodyDef,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_physic_desc_fixture_defs_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::physic_desc *arg1 = (FESimple::physic_desc *) 0 ;
  std::vector< FESimple::b2fixture_def > *arg2 = (std::vector< FESimple::b2fixture_def > *) 0 ;
  
  SWIG_check_num_args("FESimple::physic_desc::fixture_defs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::physic_desc::fixture_defs",1,"FESimple::physic_desc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::physic_desc::fixture_defs",2,"std::vector< FESimple::b2fixture_def > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__physic_desc,0))){
    SWIG_fail_ptr("physic_desc_fixture_defs_set",1,SWIGTYPE_p_FESimple__physic_desc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_FESimple__b2fixture_def_t,0))){
    SWIG_fail_ptr("physic_desc_fixture_defs_set",2,SWIGTYPE_p_std__vectorT_FESimple__b2fixture_def_t);
  }
  
  if (arg1) (arg1)->fixture_defs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_physic_desc_fixture_defs_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::physic_desc *arg1 = (FESimple::physic_desc *) 0 ;
  std::vector< FESimple::b2fixture_def > *result = 0 ;
  
  SWIG_check_num_args("FESimple::physic_desc::fixture_defs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::physic_desc::fixture_defs",1,"FESimple::physic_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__physic_desc,0))){
    SWIG_fail_ptr("physic_desc_fixture_defs_get",1,SWIGTYPE_p_FESimple__physic_desc);
  }
  
  result = (std::vector< FESimple::b2fixture_def > *)& ((arg1)->fixture_defs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__b2fixture_def_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_physic_desc(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::physic_desc *result = 0 ;
  
  SWIG_check_num_args("FESimple::physic_desc::physic_desc",0,0)
  result = (FESimple::physic_desc *)new FESimple::physic_desc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__physic_desc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_physic_desc(void *obj) {
FESimple::physic_desc *arg1 = (FESimple::physic_desc *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_physic_desc_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_physic_desc_attributes[] = {
    { "body_def", _wrap_physic_desc_body_def_get, _wrap_physic_desc_body_def_set},
    { "fixture_defs", _wrap_physic_desc_fixture_defs_get, _wrap_physic_desc_fixture_defs_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_physic_desc_bases[] = {0};
static const char *swig_FESimple_physic_desc_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_physic_desc = { "physic_desc", &SWIGTYPE_p_FESimple__physic_desc,_wrap_new_physic_desc, swig_delete_physic_desc, swig_FESimple_physic_desc_methods, swig_FESimple_physic_desc_attributes, swig_FESimple_physic_desc_bases, swig_FESimple_physic_desc_base_names };

static int _wrap_sprite_component_desc_physic_desc_name_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_component_desc *arg1 = (FESimple::sprite_component_desc *) 0 ;
  FESimple::Name *arg2 = 0 ;
  FESimple::Name temp2 ;
  
  SWIG_check_num_args("FESimple::sprite_component_desc::physic_desc_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_component_desc::physic_desc_name",1,"FESimple::sprite_component_desc *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::sprite_component_desc::physic_desc_name",2,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_component_desc,0))){
    SWIG_fail_ptr("sprite_component_desc_physic_desc_name_set",1,SWIGTYPE_p_FESimple__sprite_component_desc);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->physic_desc_name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_component_desc_physic_desc_name_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_component_desc *arg1 = (FESimple::sprite_component_desc *) 0 ;
  FESimple::Name *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_component_desc::physic_desc_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_component_desc::physic_desc_name",1,"FESimple::sprite_component_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_component_desc,0))){
    SWIG_fail_ptr("sprite_component_desc_physic_desc_name_get",1,SWIGTYPE_p_FESimple__sprite_component_desc);
  }
  
  result = (FESimple::Name *) & ((arg1)->physic_desc_name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_component_desc_animation_names_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_component_desc *arg1 = (FESimple::sprite_component_desc *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_num_args("FESimple::sprite_component_desc::animation_names",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_component_desc::animation_names",1,"FESimple::sprite_component_desc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::sprite_component_desc::animation_names",2,"std::vector< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_component_desc,0))){
    SWIG_fail_ptr("sprite_component_desc_animation_names_set",1,SWIGTYPE_p_FESimple__sprite_component_desc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("sprite_component_desc_animation_names_set",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  if (arg1) (arg1)->animation_names = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_component_desc_animation_names_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_component_desc *arg1 = (FESimple::sprite_component_desc *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_component_desc::animation_names",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_component_desc::animation_names",1,"FESimple::sprite_component_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_component_desc,0))){
    SWIG_fail_ptr("sprite_component_desc_animation_names_get",1,SWIGTYPE_p_FESimple__sprite_component_desc);
  }
  
  result = (std::vector< std::string > *)& ((arg1)->animation_names);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sprite_component_desc(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_component_desc *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_component_desc::sprite_component_desc",0,0)
  result = (FESimple::sprite_component_desc *)new FESimple::sprite_component_desc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__sprite_component_desc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sprite_component_desc(void *obj) {
FESimple::sprite_component_desc *arg1 = (FESimple::sprite_component_desc *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_sprite_component_desc_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_sprite_component_desc_attributes[] = {
    { "physic_desc_name", _wrap_sprite_component_desc_physic_desc_name_get, _wrap_sprite_component_desc_physic_desc_name_set},
    { "animation_names", _wrap_sprite_component_desc_animation_names_get, _wrap_sprite_component_desc_animation_names_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_sprite_component_desc_bases[] = {0};
static const char *swig_FESimple_sprite_component_desc_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_sprite_component_desc = { "sprite_component_desc", &SWIGTYPE_p_FESimple__sprite_component_desc,_wrap_new_sprite_component_desc, swig_delete_sprite_component_desc, swig_FESimple_sprite_component_desc_methods, swig_FESimple_sprite_component_desc_attributes, swig_FESimple_sprite_component_desc_bases, swig_FESimple_sprite_component_desc_base_names };

static int _wrap_sprite_component_ref_component_name_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_component_ref *arg1 = (FESimple::sprite_component_ref *) 0 ;
  FESimple::Name *arg2 = 0 ;
  FESimple::Name temp2 ;
  
  SWIG_check_num_args("FESimple::sprite_component_ref::component_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_component_ref::component_name",1,"FESimple::sprite_component_ref *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::sprite_component_ref::component_name",2,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_component_ref,0))){
    SWIG_fail_ptr("sprite_component_ref_component_name_set",1,SWIGTYPE_p_FESimple__sprite_component_ref);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->component_name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_component_ref_component_name_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_component_ref *arg1 = (FESimple::sprite_component_ref *) 0 ;
  FESimple::Name *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_component_ref::component_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_component_ref::component_name",1,"FESimple::sprite_component_ref *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_component_ref,0))){
    SWIG_fail_ptr("sprite_component_ref_component_name_get",1,SWIGTYPE_p_FESimple__sprite_component_ref);
  }
  
  result = (FESimple::Name *) & ((arg1)->component_name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_component_ref_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_component_ref *arg1 = (FESimple::sprite_component_ref *) 0 ;
  cocos2d::CCPoint *arg2 = (cocos2d::CCPoint *) 0 ;
  
  SWIG_check_num_args("FESimple::sprite_component_ref::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_component_ref::offset",1,"FESimple::sprite_component_ref *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::sprite_component_ref::offset",2,"cocos2d::CCPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_component_ref,0))){
    SWIG_fail_ptr("sprite_component_ref_offset_set",1,SWIGTYPE_p_FESimple__sprite_component_ref);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("sprite_component_ref_offset_set",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  if (arg1) (arg1)->offset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_component_ref_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_component_ref *arg1 = (FESimple::sprite_component_ref *) 0 ;
  cocos2d::CCPoint *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_component_ref::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_component_ref::offset",1,"FESimple::sprite_component_ref *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_component_ref,0))){
    SWIG_fail_ptr("sprite_component_ref_offset_get",1,SWIGTYPE_p_FESimple__sprite_component_ref);
  }
  
  result = (cocos2d::CCPoint *)& ((arg1)->offset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCPoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sprite_component_ref(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_component_ref *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_component_ref::sprite_component_ref",0,0)
  result = (FESimple::sprite_component_ref *)new FESimple::sprite_component_ref();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__sprite_component_ref,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sprite_component_ref(void *obj) {
FESimple::sprite_component_ref *arg1 = (FESimple::sprite_component_ref *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_sprite_component_ref_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_sprite_component_ref_attributes[] = {
    { "component_name", _wrap_sprite_component_ref_component_name_get, _wrap_sprite_component_ref_component_name_set},
    { "offset", _wrap_sprite_component_ref_offset_get, _wrap_sprite_component_ref_offset_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_sprite_component_ref_bases[] = {0};
static const char *swig_FESimple_sprite_component_ref_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_sprite_component_ref = { "sprite_component_ref", &SWIGTYPE_p_FESimple__sprite_component_ref,_wrap_new_sprite_component_ref, swig_delete_sprite_component_ref, swig_FESimple_sprite_component_ref_methods, swig_FESimple_sprite_component_ref_attributes, swig_FESimple_sprite_component_ref_bases, swig_FESimple_sprite_component_ref_base_names };

static int _wrap_new_sprite_joint_desc(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_joint_desc *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_joint_desc::sprite_joint_desc",0,0)
  result = (FESimple::sprite_joint_desc *)new FESimple::sprite_joint_desc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__sprite_joint_desc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_joint_desc_component_a_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_joint_desc *arg1 = (FESimple::sprite_joint_desc *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("FESimple::sprite_joint_desc::component_a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_joint_desc::component_a",1,"FESimple::sprite_joint_desc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::sprite_joint_desc::component_a",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_joint_desc,0))){
    SWIG_fail_ptr("sprite_joint_desc_component_a_set",1,SWIGTYPE_p_FESimple__sprite_joint_desc);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->component_a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_joint_desc_component_a_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_joint_desc *arg1 = (FESimple::sprite_joint_desc *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("FESimple::sprite_joint_desc::component_a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_joint_desc::component_a",1,"FESimple::sprite_joint_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_joint_desc,0))){
    SWIG_fail_ptr("sprite_joint_desc_component_a_get",1,SWIGTYPE_p_FESimple__sprite_joint_desc);
  }
  
  result = (unsigned int) ((arg1)->component_a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_joint_desc_component_b_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_joint_desc *arg1 = (FESimple::sprite_joint_desc *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("FESimple::sprite_joint_desc::component_b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_joint_desc::component_b",1,"FESimple::sprite_joint_desc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::sprite_joint_desc::component_b",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_joint_desc,0))){
    SWIG_fail_ptr("sprite_joint_desc_component_b_set",1,SWIGTYPE_p_FESimple__sprite_joint_desc);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->component_b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_joint_desc_component_b_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_joint_desc *arg1 = (FESimple::sprite_joint_desc *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("FESimple::sprite_joint_desc::component_b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_joint_desc::component_b",1,"FESimple::sprite_joint_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_joint_desc,0))){
    SWIG_fail_ptr("sprite_joint_desc_component_b_get",1,SWIGTYPE_p_FESimple__sprite_joint_desc);
  }
  
  result = (unsigned int) ((arg1)->component_b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_joint_desc_joint_type_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_joint_desc *arg1 = (FESimple::sprite_joint_desc *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("FESimple::sprite_joint_desc::joint_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_joint_desc::joint_type",1,"FESimple::sprite_joint_desc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::sprite_joint_desc::joint_type",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_joint_desc,0))){
    SWIG_fail_ptr("sprite_joint_desc_joint_type_set",1,SWIGTYPE_p_FESimple__sprite_joint_desc);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->joint_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_joint_desc_joint_type_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_joint_desc *arg1 = (FESimple::sprite_joint_desc *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("FESimple::sprite_joint_desc::joint_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_joint_desc::joint_type",1,"FESimple::sprite_joint_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_joint_desc,0))){
    SWIG_fail_ptr("sprite_joint_desc_joint_type_get",1,SWIGTYPE_p_FESimple__sprite_joint_desc);
  }
  
  result = (unsigned int) ((arg1)->joint_type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sprite_joint_desc(void *obj) {
FESimple::sprite_joint_desc *arg1 = (FESimple::sprite_joint_desc *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_sprite_joint_desc_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_sprite_joint_desc_attributes[] = {
    { "component_a", _wrap_sprite_joint_desc_component_a_get, _wrap_sprite_joint_desc_component_a_set},
    { "component_b", _wrap_sprite_joint_desc_component_b_get, _wrap_sprite_joint_desc_component_b_set},
    { "joint_type", _wrap_sprite_joint_desc_joint_type_get, _wrap_sprite_joint_desc_joint_type_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_sprite_joint_desc_bases[] = {0};
static const char *swig_FESimple_sprite_joint_desc_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_sprite_joint_desc = { "sprite_joint_desc", &SWIGTYPE_p_FESimple__sprite_joint_desc,_wrap_new_sprite_joint_desc, swig_delete_sprite_joint_desc, swig_FESimple_sprite_joint_desc_methods, swig_FESimple_sprite_joint_desc_attributes, swig_FESimple_sprite_joint_desc_bases, swig_FESimple_sprite_joint_desc_base_names };

static int _wrap_sprite_desc_components_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_desc *arg1 = (FESimple::sprite_desc *) 0 ;
  std::vector< FESimple::sprite_component_ref > *arg2 = (std::vector< FESimple::sprite_component_ref > *) 0 ;
  
  SWIG_check_num_args("FESimple::sprite_desc::components",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_desc::components",1,"FESimple::sprite_desc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::sprite_desc::components",2,"std::vector< FESimple::sprite_component_ref > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_desc,0))){
    SWIG_fail_ptr("sprite_desc_components_set",1,SWIGTYPE_p_FESimple__sprite_desc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_FESimple__sprite_component_ref_t,0))){
    SWIG_fail_ptr("sprite_desc_components_set",2,SWIGTYPE_p_std__vectorT_FESimple__sprite_component_ref_t);
  }
  
  if (arg1) (arg1)->components = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_desc_components_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_desc *arg1 = (FESimple::sprite_desc *) 0 ;
  std::vector< FESimple::sprite_component_ref > *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_desc::components",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_desc::components",1,"FESimple::sprite_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_desc,0))){
    SWIG_fail_ptr("sprite_desc_components_get",1,SWIGTYPE_p_FESimple__sprite_desc);
  }
  
  result = (std::vector< FESimple::sprite_component_ref > *)& ((arg1)->components);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__sprite_component_ref_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_desc_joints_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_desc *arg1 = (FESimple::sprite_desc *) 0 ;
  std::vector< FESimple::sprite_joint_desc > *arg2 = (std::vector< FESimple::sprite_joint_desc > *) 0 ;
  
  SWIG_check_num_args("FESimple::sprite_desc::joints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_desc::joints",1,"FESimple::sprite_desc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::sprite_desc::joints",2,"std::vector< FESimple::sprite_joint_desc > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_desc,0))){
    SWIG_fail_ptr("sprite_desc_joints_set",1,SWIGTYPE_p_FESimple__sprite_desc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_FESimple__sprite_joint_desc_t,0))){
    SWIG_fail_ptr("sprite_desc_joints_set",2,SWIGTYPE_p_std__vectorT_FESimple__sprite_joint_desc_t);
  }
  
  if (arg1) (arg1)->joints = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_desc_joints_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_desc *arg1 = (FESimple::sprite_desc *) 0 ;
  std::vector< FESimple::sprite_joint_desc > *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_desc::joints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_desc::joints",1,"FESimple::sprite_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_desc,0))){
    SWIG_fail_ptr("sprite_desc_joints_get",1,SWIGTYPE_p_FESimple__sprite_desc);
  }
  
  result = (std::vector< FESimple::sprite_joint_desc > *)& ((arg1)->joints);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_FESimple__sprite_joint_desc_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sprite_desc(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_desc *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_desc::sprite_desc",0,0)
  result = (FESimple::sprite_desc *)new FESimple::sprite_desc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__sprite_desc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sprite_desc(void *obj) {
FESimple::sprite_desc *arg1 = (FESimple::sprite_desc *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_sprite_desc_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_sprite_desc_attributes[] = {
    { "components", _wrap_sprite_desc_components_get, _wrap_sprite_desc_components_set},
    { "joints", _wrap_sprite_desc_joints_get, _wrap_sprite_desc_joints_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_sprite_desc_bases[] = {0};
static const char *swig_FESimple_sprite_desc_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_sprite_desc = { "sprite_desc", &SWIGTYPE_p_FESimple__sprite_desc,_wrap_new_sprite_desc, swig_delete_sprite_desc, swig_FESimple_sprite_desc_methods, swig_FESimple_sprite_desc_attributes, swig_FESimple_sprite_desc_bases, swig_FESimple_sprite_desc_base_names };

static int _wrap_new_sprite_animation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCAction *arg1 = (cocos2d::CCAction *) 0 ;
  FESimple::Name *arg2 = 0 ;
  FESimple::Name temp2 ;
  FESimple::sprite_animation *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_animation::sprite_animation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_animation::sprite_animation",1,"cocos2d::CCAction *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::sprite_animation::sprite_animation",2,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCAction,0))){
    SWIG_fail_ptr("new_sprite_animation",1,SWIGTYPE_p_cocos2d__CCAction);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (FESimple::sprite_animation *)new FESimple::sprite_animation(arg1,(FESimple::Name const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__sprite_animation,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sprite_animation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_animation *arg1 = 0 ;
  FESimple::sprite_animation *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_animation::sprite_animation",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FESimple::sprite_animation::sprite_animation",1,"FESimple::sprite_animation const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_animation,0))){
    SWIG_fail_ptr("new_sprite_animation",1,SWIGTYPE_p_FESimple__sprite_animation);
  }
  
  result = (FESimple::sprite_animation *)new FESimple::sprite_animation((FESimple::sprite_animation const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__sprite_animation,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sprite_animation(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FESimple__sprite_animation, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_sprite_animation__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cocos2d__CCAction, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_sprite_animation__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_sprite_animation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FESimple::sprite_animation::sprite_animation(cocos2d::CCAction *,FESimple::Name const &)\n"
    "    FESimple::sprite_animation::sprite_animation(FESimple::sprite_animation const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sprite_animation_animation_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_animation *arg1 = (FESimple::sprite_animation *) 0 ;
  cocos2d::CCAction *arg2 = (cocos2d::CCAction *) 0 ;
  
  SWIG_check_num_args("FESimple::sprite_animation::animation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_animation::animation",1,"FESimple::sprite_animation *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::sprite_animation::animation",2,"cocos2d::CCAction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_animation,0))){
    SWIG_fail_ptr("sprite_animation_animation_set",1,SWIGTYPE_p_FESimple__sprite_animation);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCAction,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sprite_animation_animation_set",2,SWIGTYPE_p_cocos2d__CCAction);
  }
  
  if (arg1) (arg1)->animation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_animation_animation_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_animation *arg1 = (FESimple::sprite_animation *) 0 ;
  cocos2d::CCAction *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_animation::animation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_animation::animation",1,"FESimple::sprite_animation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_animation,0))){
    SWIG_fail_ptr("sprite_animation_animation_get",1,SWIGTYPE_p_FESimple__sprite_animation);
  }
  
  result = (cocos2d::CCAction *) ((arg1)->animation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCAction,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_animation_name_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_animation *arg1 = (FESimple::sprite_animation *) 0 ;
  FESimple::Name *arg2 = 0 ;
  FESimple::Name temp2 ;
  
  SWIG_check_num_args("FESimple::sprite_animation::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_animation::name",1,"FESimple::sprite_animation *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::sprite_animation::name",2,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_animation,0))){
    SWIG_fail_ptr("sprite_animation_name_set",1,SWIGTYPE_p_FESimple__sprite_animation);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sprite_animation_name_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::sprite_animation *arg1 = (FESimple::sprite_animation *) 0 ;
  FESimple::Name *result = 0 ;
  
  SWIG_check_num_args("FESimple::sprite_animation::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::sprite_animation::name",1,"FESimple::sprite_animation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__sprite_animation,0))){
    SWIG_fail_ptr("sprite_animation_name_get",1,SWIGTYPE_p_FESimple__sprite_animation);
  }
  
  result = (FESimple::Name *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sprite_animation(void *obj) {
FESimple::sprite_animation *arg1 = (FESimple::sprite_animation *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_sprite_animation_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_sprite_animation_attributes[] = {
    { "animation", _wrap_sprite_animation_animation_get, _wrap_sprite_animation_animation_set},
    { "name", _wrap_sprite_animation_name_get, _wrap_sprite_animation_name_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_sprite_animation_bases[] = {0};
static const char *swig_FESimple_sprite_animation_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_sprite_animation = { "sprite_animation", &SWIGTYPE_p_FESimple__sprite_animation,_wrap_new_sprite_animation, swig_delete_sprite_animation, swig_FESimple_sprite_animation_methods, swig_FESimple_sprite_animation_attributes, swig_FESimple_sprite_animation_bases, swig_FESimple_sprite_animation_base_names };

static int _wrap_FixtureUserData_sprite_component_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::FixtureUserData *arg1 = (FESimple::FixtureUserData *) 0 ;
  FESimple::SpriteComponent *arg2 = (FESimple::SpriteComponent *) 0 ;
  
  SWIG_check_num_args("FESimple::FixtureUserData::sprite_component",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::FixtureUserData::sprite_component",1,"FESimple::FixtureUserData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::FixtureUserData::sprite_component",2,"FESimple::SpriteComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__FixtureUserData,0))){
    SWIG_fail_ptr("FixtureUserData_sprite_component_set",1,SWIGTYPE_p_FESimple__FixtureUserData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__SpriteComponent,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FixtureUserData_sprite_component_set",2,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  if (arg1) (arg1)->sprite_component = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FixtureUserData_sprite_component_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::FixtureUserData *arg1 = (FESimple::FixtureUserData *) 0 ;
  FESimple::SpriteComponent *result = 0 ;
  
  SWIG_check_num_args("FESimple::FixtureUserData::sprite_component",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::FixtureUserData::sprite_component",1,"FESimple::FixtureUserData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__FixtureUserData,0))){
    SWIG_fail_ptr("FixtureUserData_sprite_component_get",1,SWIGTYPE_p_FESimple__FixtureUserData);
  }
  
  result = (FESimple::SpriteComponent *) ((arg1)->sprite_component);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SpriteComponent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FixtureUserData_identity_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::FixtureUserData *arg1 = (FESimple::FixtureUserData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("FESimple::FixtureUserData::identity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::FixtureUserData::identity",1,"FESimple::FixtureUserData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::FixtureUserData::identity",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__FixtureUserData,0))){
    SWIG_fail_ptr("FixtureUserData_identity_set",1,SWIGTYPE_p_FESimple__FixtureUserData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->identity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FixtureUserData_identity_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::FixtureUserData *arg1 = (FESimple::FixtureUserData *) 0 ;
  int result;
  
  SWIG_check_num_args("FESimple::FixtureUserData::identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::FixtureUserData::identity",1,"FESimple::FixtureUserData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__FixtureUserData,0))){
    SWIG_fail_ptr("FixtureUserData_identity_get",1,SWIGTYPE_p_FESimple__FixtureUserData);
  }
  
  result = (int) ((arg1)->identity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FixtureUserData(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::FixtureUserData *result = 0 ;
  
  SWIG_check_num_args("FESimple::FixtureUserData::FixtureUserData",0,0)
  result = (FESimple::FixtureUserData *)new FESimple::FixtureUserData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__FixtureUserData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FixtureUserData(void *obj) {
FESimple::FixtureUserData *arg1 = (FESimple::FixtureUserData *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_FixtureUserData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FESimple_FixtureUserData_attributes[] = {
    { "sprite_component", _wrap_FixtureUserData_sprite_component_get, _wrap_FixtureUserData_sprite_component_set},
    { "identity", _wrap_FixtureUserData_identity_get, _wrap_FixtureUserData_identity_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_FixtureUserData_bases[] = {0};
static const char *swig_FESimple_FixtureUserData_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_FixtureUserData = { "FixtureUserData", &SWIGTYPE_p_FESimple__FixtureUserData,_wrap_new_FixtureUserData, swig_delete_FixtureUserData, swig_FESimple_FixtureUserData_methods, swig_FESimple_FixtureUserData_attributes, swig_FESimple_FixtureUserData_bases, swig_FESimple_FixtureUserData_base_names };

static int _wrap_new_SpriteComponent(lua_State* L) {
  int SWIG_arg = 0;
  cocos2d::CCPoint *arg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< FESimple::sprite_component_desc > > arg2 ;
  std::shared_ptr< FESimple::sprite_component_desc > *argp2 ;
  FESimple::SpriteComponent *result = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::SpriteComponent",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::SpriteComponent",1,"cocos2d::CCPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::SpriteComponent",2,"std::shared_ptr< FESimple::sprite_component_desc > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("new_SpriteComponent",1,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_FESimple__sprite_component_desc_t,0))){
    SWIG_fail_ptr("new_SpriteComponent",2,SWIGTYPE_p_std__shared_ptrT_FESimple__sprite_component_desc_t);
  }
  arg2 = *argp2;
  
  result = (FESimple::SpriteComponent *)new FESimple::SpriteComponent((cocos2d::CCPoint const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SpriteComponent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_init_shader(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  bool result;
  
  SWIG_check_num_args("FESimple::SpriteComponent::init_shader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::init_shader",1,"FESimple::SpriteComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_init_shader",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  result = (bool)(arg1)->init_shader();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_play_anim(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  FESimple::Name *arg2 = 0 ;
  FESimple::Name temp2 ;
  bool result;
  
  SWIG_check_num_args("FESimple::SpriteComponent::play_anim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::play_anim",1,"FESimple::SpriteComponent *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::play_anim",2,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_play_anim",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->play_anim((FESimple::Name const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_draw(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::draw",1,"FESimple::SpriteComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_draw",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_update(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::update",1,"FESimple::SpriteComponent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_update",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  cocos2d::CCPoint *arg2 = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::setPosition",1,"FESimple::SpriteComponent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::setPosition",2,"cocos2d::CCPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_setPosition",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("SpriteComponent_setPosition",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  (arg1)->setPosition((cocos2d::CCPoint const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  cocos2d::CCPoint *result = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::getPosition",1,"FESimple::SpriteComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_getPosition",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  result = (cocos2d::CCPoint *) &(arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cocos2d__CCPoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_isDirty(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  bool result;
  
  SWIG_check_num_args("FESimple::SpriteComponent::isDirty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::isDirty",1,"FESimple::SpriteComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_isDirty",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  result = (bool)(arg1)->isDirty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_nodeToParentTransform(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  cocos2d::CCAffineTransform result;
  
  SWIG_check_num_args("FESimple::SpriteComponent::nodeToParentTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::nodeToParentTransform",1,"FESimple::SpriteComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_nodeToParentTransform",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  result = (arg1)->nodeToParentTransform();
  {
    cocos2d::CCAffineTransform * resultptr = new cocos2d::CCAffineTransform((const cocos2d::CCAffineTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cocos2d__CCAffineTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_begin_contact(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::begin_contact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::begin_contact",1,"FESimple::SpriteComponent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::begin_contact",2,"b2Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_begin_contact",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_b2Contact,0))){
    SWIG_fail_ptr("SpriteComponent_begin_contact",2,SWIGTYPE_p_b2Contact);
  }
  
  (arg1)->begin_contact(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_end_contact(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::end_contact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::end_contact",1,"FESimple::SpriteComponent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::end_contact",2,"b2Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_end_contact",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_b2Contact,0))){
    SWIG_fail_ptr("SpriteComponent_end_contact",2,SWIGTYPE_p_b2Contact);
  }
  
  (arg1)->end_contact(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_set_linear_velocity(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  cocos2d::CCPoint *arg2 = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::set_linear_velocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::set_linear_velocity",1,"FESimple::SpriteComponent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::set_linear_velocity",2,"cocos2d::CCPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_set_linear_velocity",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("SpriteComponent_set_linear_velocity",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  (arg1)->set_linear_velocity((cocos2d::CCPoint const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_set_linear_damping(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::set_linear_damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::set_linear_damping",1,"FESimple::SpriteComponent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::set_linear_damping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_set_linear_damping",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->set_linear_damping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_apply_force__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  cocos2d::CCPoint *arg2 = 0 ;
  cocos2d::CCPoint *arg3 = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::apply_force",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::apply_force",1,"FESimple::SpriteComponent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::apply_force",2,"cocos2d::CCPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FESimple::SpriteComponent::apply_force",3,"cocos2d::CCPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_apply_force",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("SpriteComponent_apply_force",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("SpriteComponent_apply_force",3,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  (arg1)->apply_force((cocos2d::CCPoint const &)*arg2,(cocos2d::CCPoint const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_apply_force__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  cocos2d::CCPoint *arg2 = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::apply_force",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::apply_force",1,"FESimple::SpriteComponent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::apply_force",2,"cocos2d::CCPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_apply_force",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("SpriteComponent_apply_force",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  (arg1)->apply_force((cocos2d::CCPoint const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_apply_force(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FESimple__SpriteComponent, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cocos2d__CCPoint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SpriteComponent_apply_force__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FESimple__SpriteComponent, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cocos2d__CCPoint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_cocos2d__CCPoint, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SpriteComponent_apply_force__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SpriteComponent_apply_force'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FESimple::SpriteComponent::apply_force(cocos2d::CCPoint const &,cocos2d::CCPoint const &)\n"
    "    FESimple::SpriteComponent::apply_force(cocos2d::CCPoint const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SpriteComponent_apply_torque(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::apply_torque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::apply_torque",1,"FESimple::SpriteComponent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::apply_torque",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_apply_torque",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->apply_torque(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_set_angular_damping(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::set_angular_damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::set_angular_damping",1,"FESimple::SpriteComponent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::set_angular_damping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_set_angular_damping",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->set_angular_damping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_apply_linear_impulse(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  cocos2d::CCPoint *arg2 = 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::apply_linear_impulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::apply_linear_impulse",1,"FESimple::SpriteComponent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::apply_linear_impulse",2,"cocos2d::CCPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_apply_linear_impulse",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__CCPoint,0))){
    SWIG_fail_ptr("SpriteComponent_apply_linear_impulse",2,SWIGTYPE_p_cocos2d__CCPoint);
  }
  
  (arg1)->apply_linear_impulse((cocos2d::CCPoint const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_apply_angular_impulse(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::apply_angular_impulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::apply_angular_impulse",1,"FESimple::SpriteComponent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::apply_angular_impulse",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_apply_angular_impulse",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->apply_angular_impulse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_wakeup(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::wakeup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::wakeup",1,"FESimple::SpriteComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_wakeup",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  (arg1)->wakeup();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_color_mask(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  cocos2d::ccColor4F *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::color_mask",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::color_mask",1,"FESimple::SpriteComponent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::color_mask",2,"cocos2d::ccColor4F const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FESimple::SpriteComponent::color_mask",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_color_mask",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__ccColor4F,0))){
    SWIG_fail_ptr("SpriteComponent_color_mask",2,SWIGTYPE_p_cocos2d__ccColor4F);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->color_mask((cocos2d::ccColor4F const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_color_tint(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  cocos2d::ccColor4F *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::color_tint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::color_tint",1,"FESimple::SpriteComponent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::color_tint",2,"cocos2d::ccColor4F const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FESimple::SpriteComponent::color_tint",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_color_tint",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cocos2d__ccColor4F,0))){
    SWIG_fail_ptr("SpriteComponent_color_tint",2,SWIGTYPE_p_cocos2d__ccColor4F);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->color_tint((cocos2d::ccColor4F const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_set_shader(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  FESimple::Name *arg2 = 0 ;
  FESimple::Name temp2 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::set_shader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::set_shader",1,"FESimple::SpriteComponent *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::set_shader",2,"FESimple::Name const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_set_shader",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->set_shader((FESimple::Name const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_set_owner(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  SwigValueWrapper< std::weak_ptr< FESimple::SpriteBase > > arg2 ;
  std::weak_ptr< FESimple::SpriteBase > *argp2 ;
  
  SWIG_check_num_args("FESimple::SpriteComponent::set_owner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::set_owner",1,"FESimple::SpriteComponent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FESimple::SpriteComponent::set_owner",2,"std::weak_ptr< FESimple::SpriteBase >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_set_owner",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__weak_ptrT_FESimple__SpriteBase_t,0))){
    SWIG_fail_ptr("SpriteComponent_set_owner",2,SWIGTYPE_p_std__weak_ptrT_FESimple__SpriteBase_t);
  }
  arg2 = *argp2;
  
  (arg1)->set_owner(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteComponent_get_owner(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) 0 ;
  SwigValueWrapper< std::weak_ptr< FESimple::SpriteBase > > result;
  
  SWIG_check_num_args("FESimple::SpriteComponent::get_owner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::SpriteComponent::get_owner",1,"FESimple::SpriteComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__SpriteComponent,0))){
    SWIG_fail_ptr("SpriteComponent_get_owner",1,SWIGTYPE_p_FESimple__SpriteComponent);
  }
  
  result = (arg1)->get_owner();
  {
    std::weak_ptr< FESimple::SpriteBase > * resultptr = new std::weak_ptr< FESimple::SpriteBase >((const std::weak_ptr< FESimple::SpriteBase > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__weak_ptrT_FESimple__SpriteBase_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SpriteComponent(void *obj) {
FESimple::SpriteComponent *arg1 = (FESimple::SpriteComponent *) obj;
arg1->release();
}
static swig_lua_method swig_FESimple_SpriteComponent_methods[] = {
    {"init_shader", _wrap_SpriteComponent_init_shader}, 
    {"play_anim", _wrap_SpriteComponent_play_anim}, 
    {"draw", _wrap_SpriteComponent_draw}, 
    {"update", _wrap_SpriteComponent_update}, 
    {"setPosition", _wrap_SpriteComponent_setPosition}, 
    {"getPosition", _wrap_SpriteComponent_getPosition}, 
    {"isDirty", _wrap_SpriteComponent_isDirty}, 
    {"nodeToParentTransform", _wrap_SpriteComponent_nodeToParentTransform}, 
    {"begin_contact", _wrap_SpriteComponent_begin_contact}, 
    {"end_contact", _wrap_SpriteComponent_end_contact}, 
    {"set_linear_velocity", _wrap_SpriteComponent_set_linear_velocity}, 
    {"set_linear_damping", _wrap_SpriteComponent_set_linear_damping}, 
    {"apply_force", _wrap_SpriteComponent_apply_force}, 
    {"apply_torque", _wrap_SpriteComponent_apply_torque}, 
    {"set_angular_damping", _wrap_SpriteComponent_set_angular_damping}, 
    {"apply_linear_impulse", _wrap_SpriteComponent_apply_linear_impulse}, 
    {"apply_angular_impulse", _wrap_SpriteComponent_apply_angular_impulse}, 
    {"wakeup", _wrap_SpriteComponent_wakeup}, 
    {"color_mask", _wrap_SpriteComponent_color_mask}, 
    {"color_tint", _wrap_SpriteComponent_color_tint}, 
    {"set_shader", _wrap_SpriteComponent_set_shader}, 
    {"set_owner", _wrap_SpriteComponent_set_owner}, 
    {"get_owner", _wrap_SpriteComponent_get_owner}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_SpriteComponent_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_FESimple_SpriteComponent_bases[] = {0};
static const char *swig_FESimple_SpriteComponent_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_SpriteComponent = { "SpriteComponent", &SWIGTYPE_p_FESimple__SpriteComponent,_wrap_new_SpriteComponent, swig_delete_SpriteComponent, swig_FESimple_SpriteComponent_methods, swig_FESimple_SpriteComponent_attributes, swig_FESimple_SpriteComponent_bases, swig_FESimple_SpriteComponent_base_names };

static int _wrap_ResourceManager_instance(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *result = 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::instance",0,0)
  result = (FESimple::ResourceManager *)FESimple::ResourceManager::instance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__ResourceManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_load_sprite_desc(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::load_sprite_desc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::load_sprite_desc",1,"FESimple::ResourceManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::ResourceManager::load_sprite_desc",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_load_sprite_desc",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load_sprite_desc((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_load_physic_desc(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::load_physic_desc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::load_physic_desc",1,"FESimple::ResourceManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::ResourceManager::load_physic_desc",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_load_physic_desc",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load_physic_desc((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_load_sprite_component_desc(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::load_sprite_component_desc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::load_sprite_component_desc",1,"FESimple::ResourceManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::ResourceManager::load_sprite_component_desc",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_load_sprite_component_desc",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load_sprite_component_desc((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_get_level_data(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< std::shared_ptr< FESimple::LevelData > > result;
  
  SWIG_check_num_args("FESimple::ResourceManager::get_level_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::get_level_data",1,"FESimple::ResourceManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("FESimple::ResourceManager::get_level_data",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_get_level_data",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->get_level_data((std::string const &)*arg2);
  {
    std::shared_ptr< FESimple::LevelData > * resultptr = new std::shared_ptr< FESimple::LevelData >((const std::shared_ptr< FESimple::LevelData > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_FESimple__LevelData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_sprite_descs_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  FESimple::SharedReourceMap< FESimple::sprite_desc > *arg2 = (FESimple::SharedReourceMap< FESimple::sprite_desc > *) 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::sprite_descs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::sprite_descs",1,"FESimple::ResourceManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::ResourceManager::sprite_descs",2,"FESimple::SharedReourceMap< FESimple::sprite_desc > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_sprite_descs_set",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__sprite_desc_t,0))){
    SWIG_fail_ptr("ResourceManager_sprite_descs_set",2,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__sprite_desc_t);
  }
  
  if (arg1) (arg1)->sprite_descs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_sprite_descs_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  FESimple::SharedReourceMap< FESimple::sprite_desc > *result = 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::sprite_descs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::sprite_descs",1,"FESimple::ResourceManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_sprite_descs_get",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  result = (FESimple::SharedReourceMap< FESimple::sprite_desc > *)& ((arg1)->sprite_descs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__sprite_desc_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_physic_descs_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  FESimple::SharedReourceMap< FESimple::physic_desc > *arg2 = (FESimple::SharedReourceMap< FESimple::physic_desc > *) 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::physic_descs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::physic_descs",1,"FESimple::ResourceManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::ResourceManager::physic_descs",2,"FESimple::SharedReourceMap< FESimple::physic_desc > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_physic_descs_set",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__physic_desc_t,0))){
    SWIG_fail_ptr("ResourceManager_physic_descs_set",2,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__physic_desc_t);
  }
  
  if (arg1) (arg1)->physic_descs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_physic_descs_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  FESimple::SharedReourceMap< FESimple::physic_desc > *result = 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::physic_descs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::physic_descs",1,"FESimple::ResourceManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_physic_descs_get",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  result = (FESimple::SharedReourceMap< FESimple::physic_desc > *)& ((arg1)->physic_descs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__physic_desc_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_sprite_components_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  FESimple::SharedReourceMap< FESimple::sprite_component_desc > *arg2 = (FESimple::SharedReourceMap< FESimple::sprite_component_desc > *) 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::sprite_components",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::sprite_components",1,"FESimple::ResourceManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::ResourceManager::sprite_components",2,"FESimple::SharedReourceMap< FESimple::sprite_component_desc > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_sprite_components_set",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__sprite_component_desc_t,0))){
    SWIG_fail_ptr("ResourceManager_sprite_components_set",2,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__sprite_component_desc_t);
  }
  
  if (arg1) (arg1)->sprite_components = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_sprite_components_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  FESimple::SharedReourceMap< FESimple::sprite_component_desc > *result = 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::sprite_components",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::sprite_components",1,"FESimple::ResourceManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_sprite_components_get",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  result = (FESimple::SharedReourceMap< FESimple::sprite_component_desc > *)& ((arg1)->sprite_components);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__sprite_component_desc_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_animations_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  FESimple::SharedReourceMap< FESimple::animation > *arg2 = (FESimple::SharedReourceMap< FESimple::animation > *) 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::animations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::animations",1,"FESimple::ResourceManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::ResourceManager::animations",2,"FESimple::SharedReourceMap< FESimple::animation > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_animations_set",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__animation_t,0))){
    SWIG_fail_ptr("ResourceManager_animations_set",2,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__animation_t);
  }
  
  if (arg1) (arg1)->animations = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_animations_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  FESimple::SharedReourceMap< FESimple::animation > *result = 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::animations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::animations",1,"FESimple::ResourceManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_animations_get",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  result = (FESimple::SharedReourceMap< FESimple::animation > *)& ((arg1)->animations);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__animation_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_levels_set(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  FESimple::SharedReourceMap< FESimple::LevelData > *arg2 = (FESimple::SharedReourceMap< FESimple::LevelData > *) 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::levels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::levels",1,"FESimple::ResourceManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FESimple::ResourceManager::levels",2,"FESimple::SharedReourceMap< FESimple::LevelData > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_levels_set",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__LevelData_t,0))){
    SWIG_fail_ptr("ResourceManager_levels_set",2,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__LevelData_t);
  }
  
  if (arg1) (arg1)->levels = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceManager_levels_get(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) 0 ;
  FESimple::SharedReourceMap< FESimple::LevelData > *result = 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::levels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FESimple::ResourceManager::levels",1,"FESimple::ResourceManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FESimple__ResourceManager,0))){
    SWIG_fail_ptr("ResourceManager_levels_get",1,SWIGTYPE_p_FESimple__ResourceManager);
  }
  
  result = (FESimple::SharedReourceMap< FESimple::LevelData > *)& ((arg1)->levels);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__SharedReourceMapT_FESimple__LevelData_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ResourceManager(lua_State* L) {
  int SWIG_arg = 0;
  FESimple::ResourceManager *result = 0 ;
  
  SWIG_check_num_args("FESimple::ResourceManager::ResourceManager",0,0)
  result = (FESimple::ResourceManager *)new FESimple::ResourceManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FESimple__ResourceManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ResourceManager(void *obj) {
FESimple::ResourceManager *arg1 = (FESimple::ResourceManager *) obj;
delete arg1;
}
static swig_lua_method swig_FESimple_ResourceManager_methods[] = {
    {"load_sprite_desc", _wrap_ResourceManager_load_sprite_desc}, 
    {"load_physic_desc", _wrap_ResourceManager_load_physic_desc}, 
    {"load_sprite_component_desc", _wrap_ResourceManager_load_sprite_component_desc}, 
    {"get_level_data", _wrap_ResourceManager_get_level_data}, 
    {0,0}
};
static swig_lua_attribute swig_FESimple_ResourceManager_attributes[] = {
    { "sprite_descs", _wrap_ResourceManager_sprite_descs_get, _wrap_ResourceManager_sprite_descs_set},
    { "physic_descs", _wrap_ResourceManager_physic_descs_get, _wrap_ResourceManager_physic_descs_set},
    { "sprite_components", _wrap_ResourceManager_sprite_components_get, _wrap_ResourceManager_sprite_components_set},
    { "animations", _wrap_ResourceManager_animations_get, _wrap_ResourceManager_animations_set},
    { "levels", _wrap_ResourceManager_levels_get, _wrap_ResourceManager_levels_set},
    {0,0,0}
};
static swig_lua_class *swig_FESimple_ResourceManager_bases[] = {0};
static const char *swig_FESimple_ResourceManager_base_names[] = {0};
static swig_lua_class _wrap_class_FESimple_ResourceManager = { "ResourceManager", &SWIGTYPE_p_FESimple__ResourceManager,_wrap_new_ResourceManager, swig_delete_ResourceManager, swig_FESimple_ResourceManager_methods, swig_FESimple_ResourceManager_attributes, swig_FESimple_ResourceManager_bases, swig_FESimple_ResourceManager_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "current_time", _wrap_current_time},
    { "set_current_time", _wrap_set_current_time},
    { "string_to_point", _wrap_string_to_point},
    { "point_to_string", _wrap_point_to_string},
    { "string_to_rect", _wrap_string_to_rect},
    { "split_string", _wrap_split_string},
    { "str_to_joint_type", _wrap_str_to_joint_type},
    { "full_path", _wrap_full_path},
    { "file_name_from_path", _wrap_file_name_from_path},
    { "file_extension_from_path", _wrap_file_extension_from_path},
    { "relative_path_to_app", _wrap_relative_path_to_app},
    { "string_to_floats", _wrap_string_to_floats},
    { "string_to_b2Vec", _wrap_string_to_b2Vec},
    { "string_to_b2BodyType", _wrap_string_to_b2BodyType},
    { "set_game", _wrap_set_game},
    { "get_game", _wrap_get_game},
    { "ptm_ratio", _wrap_ptm_ratio},
    { "point_to_b2Vec2", _wrap_point_to_b2Vec2},
    { "b2Vec2_to_point", _wrap_b2Vec2_to_point},
    { "__add", _wrap___add},
    { "__sub", _wrap___sub},
    { "angle_to_rad", _wrap_angle_to_rad},
    { "rad_to_angle", _wrap_rad_to_angle},
    { "random",_wrap_random},
    { "random_dir",_wrap_random_dir},
    { "get_game_info", _wrap_get_game_info},
    { "make_gameobj_ptr", _wrap_make_gameobj_ptr},
    { "init_python", _wrap_init_python},
    { "ends_with", _wrap_ends_with},
    { "register_FEX_classes", _wrap_register_FEX_classes},
    { "GameObjFactory_construct_obj", _wrap_GameObjFactory_construct_obj},
    { "GameObjFactory_get_all_classes", _wrap_GameObjFactory_get_all_classes},
    { "GameObjFactory_add_class_info", _wrap_GameObjFactory_add_class_info},
    { "ResourceManager_instance", _wrap_ResourceManager_instance},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "GameObjBase_classinfo", _wrap_GameObjBase_classinfo_get, _wrap_GameObjBase_classinfo_set },
    { "SpriteBase_classinfo", _wrap_SpriteBase_classinfo_get, _wrap_SpriteBase_classinfo_set },
    { "Pi", _wrap_Pi_get, _wrap_Pi_set },
    { "g_game_info", _wrap_g_game_info_get, _wrap_g_game_info_set },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_FESimple__SpriteBaseTo_p_FESimple__GameObjBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FESimple::GameObjBase *)  ((FESimple::SpriteBase *) x));
}
static void *_p_FESimple__IOSTouchControllerTo_p_FESimple__ControllerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FESimple::ControllerBase *)  ((FESimple::IOSTouchController *) x));
}
static swig_type_info _swigt__p_FESimple__ClassInfo = {"_p_FESimple__ClassInfo", "FESimple::ClassInfo *", 0, 0, (void*)&_wrap_class_FESimple_ClassInfo, 0};
static swig_type_info _swigt__p_FESimple__ControllerBase = {"_p_FESimple__ControllerBase", "FESimple::ControllerBase *", 0, 0, (void*)&_wrap_class_FESimple_ControllerBase, 0};
static swig_type_info _swigt__p_FESimple__EditorProxy = {"_p_FESimple__EditorProxy", "FESimple::EditorProxy *", 0, 0, (void*)&_wrap_class_FESimple_EditorProxy, 0};
static swig_type_info _swigt__p_FESimple__FixtureUserData = {"_p_FESimple__FixtureUserData", "FESimple::FixtureUserData *", 0, 0, (void*)&_wrap_class_FESimple_FixtureUserData, 0};
static swig_type_info _swigt__p_FESimple__GameBase = {"_p_FESimple__GameBase", "FESimple::GameBase *", 0, 0, (void*)&_wrap_class_FESimple_GameBase, 0};
static swig_type_info _swigt__p_FESimple__GameInfo = {"_p_FESimple__GameInfo", "FESimple::GameInfo *", 0, 0, (void*)&_wrap_class_FESimple_GameInfo, 0};
static swig_type_info _swigt__p_FESimple__GameObjBase = {"_p_FESimple__GameObjBase", "FESimple::GameObjBase *", 0, 0, (void*)&_wrap_class_FESimple_GameObjBase, 0};
static swig_type_info _swigt__p_FESimple__GameObjFactory = {"_p_FESimple__GameObjFactory", "FESimple::GameObjFactory *", 0, 0, (void*)&_wrap_class_FESimple_GameObjFactory, 0};
static swig_type_info _swigt__p_FESimple__GameScene = {"_p_FESimple__GameScene", "FESimple::GameScene *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FESimple__IOSTouchController = {"_p_FESimple__IOSTouchController", "FESimple::IOSTouchController *", 0, 0, (void*)&_wrap_class_FESimple_IOSTouchController, 0};
static swig_type_info _swigt__p_FESimple__LevelBase = {"_p_FESimple__LevelBase", "FESimple::LevelBase *", 0, 0, (void*)&_wrap_class_FESimple_LevelBase, 0};
static swig_type_info _swigt__p_FESimple__LevelBound = {"_p_FESimple__LevelBound", "FESimple::LevelBound *", 0, 0, (void*)&_wrap_class_FESimple_LevelBound, 0};
static swig_type_info _swigt__p_FESimple__LevelData = {"_p_FESimple__LevelData", "FESimple::LevelData *", 0, 0, (void*)&_wrap_class_FESimple_LevelData, 0};
static swig_type_info _swigt__p_FESimple__LevelTrigger = {"_p_FESimple__LevelTrigger", "FESimple::LevelTrigger *", 0, 0, (void*)&_wrap_class_FESimple_LevelTrigger, 0};
static swig_type_info _swigt__p_FESimple__ResourceManager = {"_p_FESimple__ResourceManager", "FESimple::ResourceManager *", 0, 0, (void*)&_wrap_class_FESimple_ResourceManager, 0};
static swig_type_info _swigt__p_FESimple__SharedReourceMapT_FESimple__LevelData_t = {"_p_FESimple__SharedReourceMapT_FESimple__LevelData_t", "FESimple::SharedReourceMap< FESimple::LevelData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FESimple__SharedReourceMapT_FESimple__animation_t = {"_p_FESimple__SharedReourceMapT_FESimple__animation_t", "FESimple::SharedReourceMap< FESimple::animation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FESimple__SharedReourceMapT_FESimple__physic_desc_t = {"_p_FESimple__SharedReourceMapT_FESimple__physic_desc_t", "FESimple::SharedReourceMap< FESimple::physic_desc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FESimple__SharedReourceMapT_FESimple__sprite_component_desc_t = {"_p_FESimple__SharedReourceMapT_FESimple__sprite_component_desc_t", "FESimple::SharedReourceMap< FESimple::sprite_component_desc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FESimple__SharedReourceMapT_FESimple__sprite_desc_t = {"_p_FESimple__SharedReourceMapT_FESimple__sprite_desc_t", "FESimple::SharedReourceMap< FESimple::sprite_desc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FESimple__SpriteBase = {"_p_FESimple__SpriteBase", "FESimple::SpriteBase *", 0, 0, (void*)&_wrap_class_FESimple_SpriteBase, 0};
static swig_type_info _swigt__p_FESimple__SpriteComponent = {"_p_FESimple__SpriteComponent", "FESimple::SpriteComponent *", 0, 0, (void*)&_wrap_class_FESimple_SpriteComponent, 0};
static swig_type_info _swigt__p_FESimple__animation = {"_p_FESimple__animation", "FESimple::animation *", 0, 0, (void*)&_wrap_class_FESimple_animation, 0};
static swig_type_info _swigt__p_FESimple__b2fixture_def = {"_p_FESimple__b2fixture_def", "FESimple::b2fixture_def *", 0, 0, (void*)&_wrap_class_FESimple_b2fixture_def, 0};
static swig_type_info _swigt__p_FESimple__physic_desc = {"_p_FESimple__physic_desc", "FESimple::physic_desc *", 0, 0, (void*)&_wrap_class_FESimple_physic_desc, 0};
static swig_type_info _swigt__p_FESimple__sprite_animation = {"_p_FESimple__sprite_animation", "FESimple::sprite_animation *", 0, 0, (void*)&_wrap_class_FESimple_sprite_animation, 0};
static swig_type_info _swigt__p_FESimple__sprite_component_desc = {"_p_FESimple__sprite_component_desc", "FESimple::sprite_component_desc *", 0, 0, (void*)&_wrap_class_FESimple_sprite_component_desc, 0};
static swig_type_info _swigt__p_FESimple__sprite_component_ref = {"_p_FESimple__sprite_component_ref", "FESimple::sprite_component_ref *", 0, 0, (void*)&_wrap_class_FESimple_sprite_component_ref, 0};
static swig_type_info _swigt__p_FESimple__sprite_desc = {"_p_FESimple__sprite_desc", "FESimple::sprite_desc *", 0, 0, (void*)&_wrap_class_FESimple_sprite_desc, 0};
static swig_type_info _swigt__p_FESimple__sprite_joint_desc = {"_p_FESimple__sprite_joint_desc", "FESimple::sprite_joint_desc *", 0, 0, (void*)&_wrap_class_FESimple_sprite_joint_desc, 0};
static swig_type_info _swigt__p_b2BodyDef = {"_p_b2BodyDef", "b2BodyDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BodyType = {"_p_b2BodyType", "b2BodyType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Contact = {"_p_b2Contact", "b2Contact *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2JointType = {"_p_b2JointType", "b2JointType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Vec2 = {"_p_b2Vec2", "b2Vec2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2World = {"_p_b2World", "b2World *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cocos2d__CCAction = {"_p_cocos2d__CCAction", "cocos2d::CCAction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cocos2d__CCAffineTransform = {"_p_cocos2d__CCAffineTransform", "cocos2d::CCAffineTransform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cocos2d__CCAnimation = {"_p_cocos2d__CCAnimation", "cocos2d::CCAnimation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cocos2d__CCEvent = {"_p_cocos2d__CCEvent", "cocos2d::CCEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cocos2d__CCPoint = {"_p_cocos2d__CCPoint", "cocos2d::CCPoint *", 0, 0, (void*)&_wrap_class_cocos2d_CCPoint, 0};
static swig_type_info _swigt__p_cocos2d__CCRect = {"_p_cocos2d__CCRect", "cocos2d::CCRect *", 0, 0, (void*)&_wrap_class_cocos2d_CCRect, 0};
static swig_type_info _swigt__p_cocos2d__CCSize = {"_p_cocos2d__CCSize", "cocos2d::CCSize *", 0, 0, (void*)&_wrap_class_cocos2d_CCSize, 0};
static swig_type_info _swigt__p_cocos2d__CCTouch = {"_p_cocos2d__CCTouch", "cocos2d::CCTouch *", 0, 0, (void*)&_wrap_class_cocos2d_CCTouch, 0};
static swig_type_info _swigt__p_cocos2d__ccColor4F = {"_p_cocos2d__ccColor4F", "cocos2d::ccColor4F *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_pfstd__mapT_std__string_std__string_t_const_RF_t = {"_p_std__functionT_void_pfstd__mapT_std__string_std__string_t_const_RF_t", "std::function< void *(std::map< std::string,std::string > const &) > *|std::function< void *(FESimple::SpawnParams const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__shared_ptrT_FESimple__GameObjBase_t_t = {"_p_std__listT_std__shared_ptrT_FESimple__GameObjBase_t_t", "std::list< FESimple::GameObjPtr > *|std::list< std::shared_ptr< FESimple::GameObjBase > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_FESimple__ClassInfo_const_p_t = {"_p_std__mapT_std__string_FESimple__ClassInfo_const_p_t", "std::map< std::string,FESimple::ClassInfo const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "FESimple::SpawnParams *|std::map< std::string,std::string > *|std::map< FESimple::Name,std::string > *", 0, 0, (void*)&_wrap_class_std_map_Sl_std_string_Sc_std_string_Sg_, 0};
static swig_type_info _swigt__p_std__shared_ptrT_FESimple__GameObjBase_t = {"_p_std__shared_ptrT_FESimple__GameObjBase_t", "FESimple::GameObjPtr *|std::shared_ptr< FESimple::GameObjBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_FESimple__LevelData_t = {"_p_std__shared_ptrT_FESimple__LevelData_t", "std::shared_ptr< FESimple::LevelData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_FESimple__sprite_component_desc_t = {"_p_std__shared_ptrT_FESimple__sprite_component_desc_t", "std::shared_ptr< FESimple::sprite_component_desc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "FESimple::Name *|std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__vectorT_FESimple__ClassInfo_p_t = {"_p_std__vectorT_FESimple__ClassInfo_p_t", "std::vector< FESimple::ClassInfo * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_FESimple__ControllerBase_p_t = {"_p_std__vectorT_FESimple__ControllerBase_p_t", "std::vector< FESimple::ControllerBase * > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_FESimple_ControllerBase_Sm__Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_FESimple__LevelTrigger_t = {"_p_std__vectorT_FESimple__LevelTrigger_t", "std::vector< FESimple::LevelTrigger > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_FESimple__SpriteComponent_p_t = {"_p_std__vectorT_FESimple__SpriteComponent_p_t", "std::vector< FESimple::SpriteComponent * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_FESimple__b2fixture_def_t = {"_p_std__vectorT_FESimple__b2fixture_def_t", "std::vector< FESimple::b2fixture_def > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_FESimple__sprite_component_ref_t = {"_p_std__vectorT_FESimple__sprite_component_ref_t", "std::vector< FESimple::sprite_component_ref > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_FESimple__sprite_joint_desc_t = {"_p_std__vectorT_FESimple__sprite_joint_desc_t", "std::vector< FESimple::sprite_joint_desc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__weak_ptrT_FESimple__GameObjBase_t = {"_p_std__weak_ptrT_FESimple__GameObjBase_t", "std::weak_ptr< FESimple::GameObjBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__weak_ptrT_FESimple__SpriteBase_t = {"_p_std__weak_ptrT_FESimple__SpriteBase_t", "std::weak_ptr< FESimple::SpriteBase > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FESimple__ClassInfo,
  &_swigt__p_FESimple__ControllerBase,
  &_swigt__p_FESimple__EditorProxy,
  &_swigt__p_FESimple__FixtureUserData,
  &_swigt__p_FESimple__GameBase,
  &_swigt__p_FESimple__GameInfo,
  &_swigt__p_FESimple__GameObjBase,
  &_swigt__p_FESimple__GameObjFactory,
  &_swigt__p_FESimple__GameScene,
  &_swigt__p_FESimple__IOSTouchController,
  &_swigt__p_FESimple__LevelBase,
  &_swigt__p_FESimple__LevelBound,
  &_swigt__p_FESimple__LevelData,
  &_swigt__p_FESimple__LevelTrigger,
  &_swigt__p_FESimple__ResourceManager,
  &_swigt__p_FESimple__SharedReourceMapT_FESimple__LevelData_t,
  &_swigt__p_FESimple__SharedReourceMapT_FESimple__animation_t,
  &_swigt__p_FESimple__SharedReourceMapT_FESimple__physic_desc_t,
  &_swigt__p_FESimple__SharedReourceMapT_FESimple__sprite_component_desc_t,
  &_swigt__p_FESimple__SharedReourceMapT_FESimple__sprite_desc_t,
  &_swigt__p_FESimple__SpriteBase,
  &_swigt__p_FESimple__SpriteComponent,
  &_swigt__p_FESimple__animation,
  &_swigt__p_FESimple__b2fixture_def,
  &_swigt__p_FESimple__physic_desc,
  &_swigt__p_FESimple__sprite_animation,
  &_swigt__p_FESimple__sprite_component_desc,
  &_swigt__p_FESimple__sprite_component_ref,
  &_swigt__p_FESimple__sprite_desc,
  &_swigt__p_FESimple__sprite_joint_desc,
  &_swigt__p_b2BodyDef,
  &_swigt__p_b2BodyType,
  &_swigt__p_b2Contact,
  &_swigt__p_b2JointType,
  &_swigt__p_b2Vec2,
  &_swigt__p_b2World,
  &_swigt__p_cocos2d__CCAction,
  &_swigt__p_cocos2d__CCAffineTransform,
  &_swigt__p_cocos2d__CCAnimation,
  &_swigt__p_cocos2d__CCEvent,
  &_swigt__p_cocos2d__CCPoint,
  &_swigt__p_cocos2d__CCRect,
  &_swigt__p_cocos2d__CCSize,
  &_swigt__p_cocos2d__CCTouch,
  &_swigt__p_cocos2d__ccColor4F,
  &_swigt__p_difference_type,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_size_type,
  &_swigt__p_std__functionT_void_pfstd__mapT_std__string_std__string_t_const_RF_t,
  &_swigt__p_std__listT_std__shared_ptrT_FESimple__GameObjBase_t_t,
  &_swigt__p_std__mapT_std__string_FESimple__ClassInfo_const_p_t,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__shared_ptrT_FESimple__GameObjBase_t,
  &_swigt__p_std__shared_ptrT_FESimple__LevelData_t,
  &_swigt__p_std__shared_ptrT_FESimple__sprite_component_desc_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_FESimple__ClassInfo_p_t,
  &_swigt__p_std__vectorT_FESimple__ControllerBase_p_t,
  &_swigt__p_std__vectorT_FESimple__LevelTrigger_t,
  &_swigt__p_std__vectorT_FESimple__SpriteComponent_p_t,
  &_swigt__p_std__vectorT_FESimple__b2fixture_def_t,
  &_swigt__p_std__vectorT_FESimple__sprite_component_ref_t,
  &_swigt__p_std__vectorT_FESimple__sprite_joint_desc_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__weak_ptrT_FESimple__GameObjBase_t,
  &_swigt__p_std__weak_ptrT_FESimple__SpriteBase_t,
};

static swig_cast_info _swigc__p_FESimple__ClassInfo[] = {  {&_swigt__p_FESimple__ClassInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__ControllerBase[] = {  {&_swigt__p_FESimple__ControllerBase, 0, 0, 0},  {&_swigt__p_FESimple__IOSTouchController, _p_FESimple__IOSTouchControllerTo_p_FESimple__ControllerBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__EditorProxy[] = {  {&_swigt__p_FESimple__EditorProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__FixtureUserData[] = {  {&_swigt__p_FESimple__FixtureUserData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__GameBase[] = {  {&_swigt__p_FESimple__GameBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__GameInfo[] = {  {&_swigt__p_FESimple__GameInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__GameObjBase[] = {  {&_swigt__p_FESimple__GameObjBase, 0, 0, 0},  {&_swigt__p_FESimple__SpriteBase, _p_FESimple__SpriteBaseTo_p_FESimple__GameObjBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__GameObjFactory[] = {  {&_swigt__p_FESimple__GameObjFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__GameScene[] = {  {&_swigt__p_FESimple__GameScene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__IOSTouchController[] = {  {&_swigt__p_FESimple__IOSTouchController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__LevelBase[] = {  {&_swigt__p_FESimple__LevelBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__LevelBound[] = {  {&_swigt__p_FESimple__LevelBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__LevelData[] = {  {&_swigt__p_FESimple__LevelData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__LevelTrigger[] = {  {&_swigt__p_FESimple__LevelTrigger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__ResourceManager[] = {  {&_swigt__p_FESimple__ResourceManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__SharedReourceMapT_FESimple__LevelData_t[] = {  {&_swigt__p_FESimple__SharedReourceMapT_FESimple__LevelData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__SharedReourceMapT_FESimple__animation_t[] = {  {&_swigt__p_FESimple__SharedReourceMapT_FESimple__animation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__SharedReourceMapT_FESimple__physic_desc_t[] = {  {&_swigt__p_FESimple__SharedReourceMapT_FESimple__physic_desc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__SharedReourceMapT_FESimple__sprite_component_desc_t[] = {  {&_swigt__p_FESimple__SharedReourceMapT_FESimple__sprite_component_desc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__SharedReourceMapT_FESimple__sprite_desc_t[] = {  {&_swigt__p_FESimple__SharedReourceMapT_FESimple__sprite_desc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__SpriteBase[] = {  {&_swigt__p_FESimple__SpriteBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__SpriteComponent[] = {  {&_swigt__p_FESimple__SpriteComponent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__animation[] = {  {&_swigt__p_FESimple__animation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__b2fixture_def[] = {  {&_swigt__p_FESimple__b2fixture_def, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__physic_desc[] = {  {&_swigt__p_FESimple__physic_desc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__sprite_animation[] = {  {&_swigt__p_FESimple__sprite_animation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__sprite_component_desc[] = {  {&_swigt__p_FESimple__sprite_component_desc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__sprite_component_ref[] = {  {&_swigt__p_FESimple__sprite_component_ref, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__sprite_desc[] = {  {&_swigt__p_FESimple__sprite_desc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FESimple__sprite_joint_desc[] = {  {&_swigt__p_FESimple__sprite_joint_desc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BodyDef[] = {  {&_swigt__p_b2BodyDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BodyType[] = {  {&_swigt__p_b2BodyType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Contact[] = {  {&_swigt__p_b2Contact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2JointType[] = {  {&_swigt__p_b2JointType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Vec2[] = {  {&_swigt__p_b2Vec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2World[] = {  {&_swigt__p_b2World, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cocos2d__CCAction[] = {  {&_swigt__p_cocos2d__CCAction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cocos2d__CCAffineTransform[] = {  {&_swigt__p_cocos2d__CCAffineTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cocos2d__CCAnimation[] = {  {&_swigt__p_cocos2d__CCAnimation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cocos2d__CCEvent[] = {  {&_swigt__p_cocos2d__CCEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cocos2d__CCPoint[] = {  {&_swigt__p_cocos2d__CCPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cocos2d__CCRect[] = {  {&_swigt__p_cocos2d__CCRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cocos2d__CCSize[] = {  {&_swigt__p_cocos2d__CCSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cocos2d__CCTouch[] = {  {&_swigt__p_cocos2d__CCTouch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cocos2d__ccColor4F[] = {  {&_swigt__p_cocos2d__ccColor4F, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_pfstd__mapT_std__string_std__string_t_const_RF_t[] = {  {&_swigt__p_std__functionT_void_pfstd__mapT_std__string_std__string_t_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__shared_ptrT_FESimple__GameObjBase_t_t[] = {  {&_swigt__p_std__listT_std__shared_ptrT_FESimple__GameObjBase_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_FESimple__ClassInfo_const_p_t[] = {  {&_swigt__p_std__mapT_std__string_FESimple__ClassInfo_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_FESimple__GameObjBase_t[] = {  {&_swigt__p_std__shared_ptrT_FESimple__GameObjBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_FESimple__LevelData_t[] = {  {&_swigt__p_std__shared_ptrT_FESimple__LevelData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_FESimple__sprite_component_desc_t[] = {  {&_swigt__p_std__shared_ptrT_FESimple__sprite_component_desc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FESimple__ClassInfo_p_t[] = {  {&_swigt__p_std__vectorT_FESimple__ClassInfo_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FESimple__ControllerBase_p_t[] = {  {&_swigt__p_std__vectorT_FESimple__ControllerBase_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FESimple__LevelTrigger_t[] = {  {&_swigt__p_std__vectorT_FESimple__LevelTrigger_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FESimple__SpriteComponent_p_t[] = {  {&_swigt__p_std__vectorT_FESimple__SpriteComponent_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FESimple__b2fixture_def_t[] = {  {&_swigt__p_std__vectorT_FESimple__b2fixture_def_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FESimple__sprite_component_ref_t[] = {  {&_swigt__p_std__vectorT_FESimple__sprite_component_ref_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FESimple__sprite_joint_desc_t[] = {  {&_swigt__p_std__vectorT_FESimple__sprite_joint_desc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__weak_ptrT_FESimple__GameObjBase_t[] = {  {&_swigt__p_std__weak_ptrT_FESimple__GameObjBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__weak_ptrT_FESimple__SpriteBase_t[] = {  {&_swigt__p_std__weak_ptrT_FESimple__SpriteBase_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FESimple__ClassInfo,
  _swigc__p_FESimple__ControllerBase,
  _swigc__p_FESimple__EditorProxy,
  _swigc__p_FESimple__FixtureUserData,
  _swigc__p_FESimple__GameBase,
  _swigc__p_FESimple__GameInfo,
  _swigc__p_FESimple__GameObjBase,
  _swigc__p_FESimple__GameObjFactory,
  _swigc__p_FESimple__GameScene,
  _swigc__p_FESimple__IOSTouchController,
  _swigc__p_FESimple__LevelBase,
  _swigc__p_FESimple__LevelBound,
  _swigc__p_FESimple__LevelData,
  _swigc__p_FESimple__LevelTrigger,
  _swigc__p_FESimple__ResourceManager,
  _swigc__p_FESimple__SharedReourceMapT_FESimple__LevelData_t,
  _swigc__p_FESimple__SharedReourceMapT_FESimple__animation_t,
  _swigc__p_FESimple__SharedReourceMapT_FESimple__physic_desc_t,
  _swigc__p_FESimple__SharedReourceMapT_FESimple__sprite_component_desc_t,
  _swigc__p_FESimple__SharedReourceMapT_FESimple__sprite_desc_t,
  _swigc__p_FESimple__SpriteBase,
  _swigc__p_FESimple__SpriteComponent,
  _swigc__p_FESimple__animation,
  _swigc__p_FESimple__b2fixture_def,
  _swigc__p_FESimple__physic_desc,
  _swigc__p_FESimple__sprite_animation,
  _swigc__p_FESimple__sprite_component_desc,
  _swigc__p_FESimple__sprite_component_ref,
  _swigc__p_FESimple__sprite_desc,
  _swigc__p_FESimple__sprite_joint_desc,
  _swigc__p_b2BodyDef,
  _swigc__p_b2BodyType,
  _swigc__p_b2Contact,
  _swigc__p_b2JointType,
  _swigc__p_b2Vec2,
  _swigc__p_b2World,
  _swigc__p_cocos2d__CCAction,
  _swigc__p_cocos2d__CCAffineTransform,
  _swigc__p_cocos2d__CCAnimation,
  _swigc__p_cocos2d__CCEvent,
  _swigc__p_cocos2d__CCPoint,
  _swigc__p_cocos2d__CCRect,
  _swigc__p_cocos2d__CCSize,
  _swigc__p_cocos2d__CCTouch,
  _swigc__p_cocos2d__ccColor4F,
  _swigc__p_difference_type,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_size_type,
  _swigc__p_std__functionT_void_pfstd__mapT_std__string_std__string_t_const_RF_t,
  _swigc__p_std__listT_std__shared_ptrT_FESimple__GameObjBase_t_t,
  _swigc__p_std__mapT_std__string_FESimple__ClassInfo_const_p_t,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__shared_ptrT_FESimple__GameObjBase_t,
  _swigc__p_std__shared_ptrT_FESimple__LevelData_t,
  _swigc__p_std__shared_ptrT_FESimple__sprite_component_desc_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_FESimple__ClassInfo_p_t,
  _swigc__p_std__vectorT_FESimple__ControllerBase_p_t,
  _swigc__p_std__vectorT_FESimple__LevelTrigger_t,
  _swigc__p_std__vectorT_FESimple__SpriteComponent_p_t,
  _swigc__p_std__vectorT_FESimple__b2fixture_def_t,
  _swigc__p_std__vectorT_FESimple__sprite_component_ref_t,
  _swigc__p_std__vectorT_FESimple__sprite_joint_desc_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__weak_ptrT_FESimple__GameObjBase_t,
  _swigc__p_std__weak_ptrT_FESimple__SpriteBase_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

