# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FEX', [dirname(__file__)])
        except ImportError:
            import _FEX
            return _FEX
        if fp is not None:
            try:
                _mod = imp.load_module('_FEX', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _FEX = swig_import_helper()
    del swig_import_helper
else:
    import _FEX
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FEX.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _FEX.SwigPyIterator_value(self)
    def incr(self, n=1): return _FEX.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _FEX.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _FEX.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _FEX.SwigPyIterator_equal(self, *args)
    def copy(self): return _FEX.SwigPyIterator_copy(self)
    def next(self): return _FEX.SwigPyIterator_next(self)
    def __next__(self): return _FEX.SwigPyIterator___next__(self)
    def previous(self): return _FEX.SwigPyIterator_previous(self)
    def advance(self, *args): return _FEX.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _FEX.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _FEX.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _FEX.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _FEX.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _FEX.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _FEX.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _FEX.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _FEX.SHARED_PTR_DISOWN
class map_string_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_string, name)
    __repr__ = _swig_repr
    def iterator(self): return _FEX.map_string_string_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _FEX.map_string_string___nonzero__(self)
    def __bool__(self): return _FEX.map_string_string___bool__(self)
    def __len__(self): return _FEX.map_string_string___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _FEX.map_string_string___getitem__(self, *args)
    def __delitem__(self, *args): return _FEX.map_string_string___delitem__(self, *args)
    def has_key(self, *args): return _FEX.map_string_string_has_key(self, *args)
    def keys(self): return _FEX.map_string_string_keys(self)
    def values(self): return _FEX.map_string_string_values(self)
    def items(self): return _FEX.map_string_string_items(self)
    def __contains__(self, *args): return _FEX.map_string_string___contains__(self, *args)
    def key_iterator(self): return _FEX.map_string_string_key_iterator(self)
    def value_iterator(self): return _FEX.map_string_string_value_iterator(self)
    def __setitem__(self, *args): return _FEX.map_string_string___setitem__(self, *args)
    def asdict(self): return _FEX.map_string_string_asdict(self)
    def __init__(self, *args): 
        this = _FEX.new_map_string_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _FEX.map_string_string_empty(self)
    def size(self): return _FEX.map_string_string_size(self)
    def clear(self): return _FEX.map_string_string_clear(self)
    def swap(self, *args): return _FEX.map_string_string_swap(self, *args)
    def get_allocator(self): return _FEX.map_string_string_get_allocator(self)
    def begin(self): return _FEX.map_string_string_begin(self)
    def end(self): return _FEX.map_string_string_end(self)
    def rbegin(self): return _FEX.map_string_string_rbegin(self)
    def rend(self): return _FEX.map_string_string_rend(self)
    def count(self, *args): return _FEX.map_string_string_count(self, *args)
    def erase(self, *args): return _FEX.map_string_string_erase(self, *args)
    def find(self, *args): return _FEX.map_string_string_find(self, *args)
    def lower_bound(self, *args): return _FEX.map_string_string_lower_bound(self, *args)
    def upper_bound(self, *args): return _FEX.map_string_string_upper_bound(self, *args)
    __swig_destroy__ = _FEX.delete_map_string_string
    __del__ = lambda self : None;
map_string_string_swigregister = _FEX.map_string_string_swigregister
map_string_string_swigregister(map_string_string)

class ClassInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassInfo, name)
    __repr__ = _swig_repr
    def is_kind_of(self, *args): return _FEX.ClassInfo_is_kind_of(self, *args)
    __swig_setmethods__["name"] = _FEX.ClassInfo_name_set
    __swig_getmethods__["name"] = _FEX.ClassInfo_name_get
    if _newclass:name = _swig_property(_FEX.ClassInfo_name_get, _FEX.ClassInfo_name_set)
    __swig_setmethods__["parent_classes"] = _FEX.ClassInfo_parent_classes_set
    __swig_getmethods__["parent_classes"] = _FEX.ClassInfo_parent_classes_get
    if _newclass:parent_classes = _swig_property(_FEX.ClassInfo_parent_classes_get, _FEX.ClassInfo_parent_classes_set)
    __swig_setmethods__["constructor"] = _FEX.ClassInfo_constructor_set
    __swig_getmethods__["constructor"] = _FEX.ClassInfo_constructor_get
    if _newclass:constructor = _swig_property(_FEX.ClassInfo_constructor_get, _FEX.ClassInfo_constructor_set)
    def __init__(self): 
        this = _FEX.new_ClassInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FEX.delete_ClassInfo
    __del__ = lambda self : None;
ClassInfo_swigregister = _FEX.ClassInfo_swigregister
ClassInfo_swigregister(ClassInfo)
cvar = _FEX.cvar

class GameObjBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameObjBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameObjBase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["classinfo"] = _FEX.GameObjBase_classinfo_set
    __swig_getmethods__["classinfo"] = _FEX.GameObjBase_classinfo_get
    if _newclass:classinfo = _swig_property(_FEX.GameObjBase_classinfo_get, _FEX.GameObjBase_classinfo_set)
    def get_class_info(self): return _FEX.GameObjBase_get_class_info(self)
    def __init__(self, *args): 
        this = _FEX.new_GameObjBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FEX.delete_GameObjBase
    __del__ = lambda self : None;
    def added_to_game(self, *args): return _FEX.GameObjBase_added_to_game(self, *args)
    def removed_from_game(self, *args): return _FEX.GameObjBase_removed_from_game(self, *args)
    def update(self, *args): return _FEX.GameObjBase_update(self, *args)
    def get_name(self): return _FEX.GameObjBase_get_name(self)
    def is_dead(self): return _FEX.GameObjBase_is_dead(self)
    def set_dead(self, *args): return _FEX.GameObjBase_set_dead(self, *args)
GameObjBase_swigregister = _FEX.GameObjBase_swigregister
GameObjBase_swigregister(GameObjBase)

class SpriteBase(GameObjBase):
    __swig_setmethods__ = {}
    for _s in [GameObjBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpriteBase, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObjBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpriteBase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["classinfo"] = _FEX.SpriteBase_classinfo_set
    __swig_getmethods__["classinfo"] = _FEX.SpriteBase_classinfo_get
    if _newclass:classinfo = _swig_property(_FEX.SpriteBase_classinfo_get, _FEX.SpriteBase_classinfo_set)
    def get_class_info(self): return _FEX.SpriteBase_get_class_info(self)
    def __init__(self, *args): 
        this = _FEX.new_SpriteBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FEX.delete_SpriteBase
    __del__ = lambda self : None;
    def added_to_game(self, *args): return _FEX.SpriteBase_added_to_game(self, *args)
    def removed_from_game(self, *args): return _FEX.SpriteBase_removed_from_game(self, *args)
    def remove_all_component(self): return _FEX.SpriteBase_remove_all_component(self)
    def add_component(self, *args): return _FEX.SpriteBase_add_component(self, *args)
    def remove_component(self, *args): return _FEX.SpriteBase_remove_component(self, *args)
    def component(self, *args): return _FEX.SpriteBase_component(self, *args)
    def begin_contact(self, *args): return _FEX.SpriteBase_begin_contact(self, *args)
    def end_contact(self, *args): return _FEX.SpriteBase_end_contact(self, *args)
    def update(self, *args): return _FEX.SpriteBase_update(self, *args)
    def set_position(self, *args): return _FEX.SpriteBase_set_position(self, *args)
    def set_rotation(self, *args): return _FEX.SpriteBase_set_rotation(self, *args)
SpriteBase_swigregister = _FEX.SpriteBase_swigregister
SpriteBase_swigregister(SpriteBase)

class GameBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _FEX.new_GameBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FEX.delete_GameBase
    __del__ = lambda self : None;
    def update(self, *args): return _FEX.GameBase_update(self, *args)
    def clean(self): return _FEX.GameBase_clean(self)
    def add_game_object(self, *args): return _FEX.GameBase_add_game_object(self, *args)
    def remove_game_object(self, *args): return _FEX.GameBase_remove_game_object(self, *args)
    def get_scene(self): return _FEX.GameBase_get_scene(self)
    def get_phy_world(self): return _FEX.GameBase_get_phy_world(self)
    def get_obj(self, *args): return _FEX.GameBase_get_obj(self, *args)
GameBase_swigregister = _FEX.GameBase_swigregister
GameBase_swigregister(GameBase)

class LevelTrigger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LevelTrigger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LevelTrigger, name)
    __repr__ = _swig_repr
    __swig_setmethods__["progress"] = _FEX.LevelTrigger_progress_set
    __swig_getmethods__["progress"] = _FEX.LevelTrigger_progress_get
    if _newclass:progress = _swig_property(_FEX.LevelTrigger_progress_get, _FEX.LevelTrigger_progress_set)
    __swig_setmethods__["params"] = _FEX.LevelTrigger_params_set
    __swig_getmethods__["params"] = _FEX.LevelTrigger_params_get
    if _newclass:params = _swig_property(_FEX.LevelTrigger_params_get, _FEX.LevelTrigger_params_set)
    def __init__(self): 
        this = _FEX.new_LevelTrigger()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FEX.delete_LevelTrigger
    __del__ = lambda self : None;
LevelTrigger_swigregister = _FEX.LevelTrigger_swigregister
LevelTrigger_swigregister(LevelTrigger)

class LevelBound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LevelBound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LevelBound, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rect"] = _FEX.LevelBound_rect_set
    __swig_getmethods__["rect"] = _FEX.LevelBound_rect_get
    if _newclass:rect = _swig_property(_FEX.LevelBound_rect_get, _FEX.LevelBound_rect_set)
    def __init__(self): 
        this = _FEX.new_LevelBound()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FEX.delete_LevelBound
    __del__ = lambda self : None;
LevelBound_swigregister = _FEX.LevelBound_swigregister
LevelBound_swigregister(LevelBound)

class LevelData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LevelData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LevelData, name)
    __repr__ = _swig_repr
    def load(self, *args): return _FEX.LevelData_load(self, *args)
    __swig_setmethods__["bound"] = _FEX.LevelData_bound_set
    __swig_getmethods__["bound"] = _FEX.LevelData_bound_get
    if _newclass:bound = _swig_property(_FEX.LevelData_bound_get, _FEX.LevelData_bound_set)
    __swig_setmethods__["triggers"] = _FEX.LevelData_triggers_set
    __swig_getmethods__["triggers"] = _FEX.LevelData_triggers_get
    if _newclass:triggers = _swig_property(_FEX.LevelData_triggers_get, _FEX.LevelData_triggers_set)
    def __init__(self): 
        this = _FEX.new_LevelData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FEX.delete_LevelData
    __del__ = lambda self : None;
LevelData_swigregister = _FEX.LevelData_swigregister
LevelData_swigregister(LevelData)

class LevelBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LevelBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LevelBase, name)
    __repr__ = _swig_repr
    def attach(self, *args): return _FEX.LevelBase_attach(self, *args)
    def reset(self, *args): return _FEX.LevelBase_reset(self, *args)
    def update(self, *args): return _FEX.LevelBase_update(self, *args)
    def get_bound(self): return _FEX.LevelBase_get_bound(self)
    def __init__(self): 
        this = _FEX.new_LevelBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FEX.delete_LevelBase
    __del__ = lambda self : None;
LevelBase_swigregister = _FEX.LevelBase_swigregister
LevelBase_swigregister(LevelBase)


def string_to_point(*args):
  return _FEX.string_to_point(*args)
string_to_point = _FEX.string_to_point

def string_to_rect(*args):
  return _FEX.string_to_rect(*args)
string_to_rect = _FEX.string_to_rect

def split_string(*args):
  return _FEX.split_string(*args)
split_string = _FEX.split_string

def str_to_joint_type(*args):
  return _FEX.str_to_joint_type(*args)
str_to_joint_type = _FEX.str_to_joint_type

def full_path(*args):
  return _FEX.full_path(*args)
full_path = _FEX.full_path

def file_name_from_path(*args):
  return _FEX.file_name_from_path(*args)
file_name_from_path = _FEX.file_name_from_path

def file_extension_from_path(*args):
  return _FEX.file_extension_from_path(*args)
file_extension_from_path = _FEX.file_extension_from_path

def relative_path_to_app(*args):
  return _FEX.relative_path_to_app(*args)
relative_path_to_app = _FEX.relative_path_to_app

def string_to_floats(*args):
  return _FEX.string_to_floats(*args)
string_to_floats = _FEX.string_to_floats

def string_to_b2Vec(*args):
  return _FEX.string_to_b2Vec(*args)
string_to_b2Vec = _FEX.string_to_b2Vec

def string_to_b2BodyType(*args):
  return _FEX.string_to_b2BodyType(*args)
string_to_b2BodyType = _FEX.string_to_b2BodyType

def set_game(*args):
  return _FEX.set_game(*args)
set_game = _FEX.set_game

def get_game():
  return _FEX.get_game()
get_game = _FEX.get_game

def ptm_ratio():
  return _FEX.ptm_ratio()
ptm_ratio = _FEX.ptm_ratio

def point_to_b2Vec2(*args):
  return _FEX.point_to_b2Vec2(*args)
point_to_b2Vec2 = _FEX.point_to_b2Vec2

def b2Vec2_to_point(*args):
  return _FEX.b2Vec2_to_point(*args)
b2Vec2_to_point = _FEX.b2Vec2_to_point

def __lshift__(*args):
  return _FEX.__lshift__(*args)
__lshift__ = _FEX.__lshift__

def __add__(*args):
  return _FEX.__add__(*args)
__add__ = _FEX.__add__

def __sub__(*args):
  return _FEX.__sub__(*args)
__sub__ = _FEX.__sub__

def angle_to_rad(*args):
  return _FEX.angle_to_rad(*args)
angle_to_rad = _FEX.angle_to_rad

def rad_to_angle(*args):
  return _FEX.rad_to_angle(*args)
rad_to_angle = _FEX.rad_to_angle

def random(_from=0.0, to=1.0):
  return _FEX.random(_from, to)
random = _FEX.random

def random_dir(*args):
  return _FEX.random_dir(*args)
random_dir = _FEX.random_dir
class GameInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["game"] = _FEX.GameInfo_game_set
    __swig_getmethods__["game"] = _FEX.GameInfo_game_get
    if _newclass:game = _swig_property(_FEX.GameInfo_game_get, _FEX.GameInfo_game_set)
    __swig_setmethods__["controllers"] = _FEX.GameInfo_controllers_set
    __swig_getmethods__["controllers"] = _FEX.GameInfo_controllers_get
    if _newclass:controllers = _swig_property(_FEX.GameInfo_controllers_get, _FEX.GameInfo_controllers_set)
    def __init__(self): 
        this = _FEX.new_GameInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FEX.delete_GameInfo
    __del__ = lambda self : None;
GameInfo_swigregister = _FEX.GameInfo_swigregister
GameInfo_swigregister(GameInfo)


def get_game_info():
  return _FEX.get_game_info()
get_game_info = _FEX.get_game_info
class GameObjFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameObjFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameObjFactory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["construct_obj"] = lambda x: _FEX.GameObjFactory_construct_obj
    if _newclass:construct_obj = staticmethod(_FEX.GameObjFactory_construct_obj)
    def __init__(self): 
        this = _FEX.new_GameObjFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FEX.delete_GameObjFactory
    __del__ = lambda self : None;
GameObjFactory_swigregister = _FEX.GameObjFactory_swigregister
GameObjFactory_swigregister(GameObjFactory)

def GameObjFactory_construct_obj(*args):
  return _FEX.GameObjFactory_construct_obj(*args)
GameObjFactory_construct_obj = _FEX.GameObjFactory_construct_obj

# This file is compatible with both classic and new-style classes.


